{"version":"1","records":[{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers the fundamentals of atmospheric modeling, including topics such as:\n\nbasic conservation equations\n\napproaches to finite differencing\n\nnumerical scheme assessments\n\nnumerical corrections and filtering\n\ncoordinate systems\n\ninitial/boundary conditions\n\nlimitations and tradeoffs in modeling","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Motivation"},"content":"Numerical models are widely used, but gaining expertise in how they work has often been unnecessarily challenging. This cookbook hopes to address that! This is intended for a somewhat broad audience: those with at least some atmospheric dynamics knowledge, but nearly any level of programming experience (assuming a baseline level as covered in the \n\nPythia Foundations).","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Authors"},"content":"JT Thielen\n\nSam Gardner\n\nRoger Riggin\n\nJustin Spotts\n\nMathieu R\n\nKevin Tyle\n\nBrittany Freeman\n\nSnigdha Samantaray\n\nLin Wu\n\nShreya Keshri\n\nGerardo Rivera Tello","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"\n\nAddition contributions to discussions and decisions for this notebook by:\n\nRachel Smith","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Resources"},"type":"lvl2","url":"/#resources","position":8},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Resources"},"content":"This cookbook would not be possible without the vast collection of academic texts and prior work in atmospheric modeling. The key resources used in building this notebook include:\n\nTextbooks\n\nAn Introduction to Numerical Modeling of the Atmosphere, by David Randall\n\nMesoscale Meteorological Modeling, 2nd Edition, by Roger Piekle\n\nIntroduction to geophysical fluid dynamics: Physical and numerical aspects\n\nJournal Articles\n\n...\n\nOther Resources\n\nPet Tornado, by Brian Fiedler\n\nIncompressible flow buoyant bubble","type":"content","url":"/#resources","position":9},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Structure"},"content":"(State one or more sections that will comprise the notebook. E.g., This cookbook is broken up into two main sections - “Foundations” and “Example Workflows.” Then, describe each section below.)","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 1 ( Replace with the title of this section, e.g. “Foundations” )","lvl2":"Structure"},"type":"lvl3","url":"/#section-1-replace-with-the-title-of-this-section-e-g-foundations","position":12},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 1 ( Replace with the title of this section, e.g. “Foundations” )","lvl2":"Structure"},"content":"(Add content for this section, e.g., \"The foundational content includes ... \")","type":"content","url":"/#section-1-replace-with-the-title-of-this-section-e-g-foundations","position":13},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 2 ( Replace with the title of this section, e.g. “Example workflows” )","lvl2":"Structure"},"type":"lvl3","url":"/#section-2-replace-with-the-title-of-this-section-e-g-example-workflows","position":14},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 2 ( Replace with the title of this section, e.g. “Example workflows” )","lvl2":"Structure"},"content":"(Add content for this section, e.g., \"Example workflows include ... \")","type":"content","url":"/#section-2-replace-with-the-title-of-this-section-e-g-example-workflows","position":15},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":18},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":19},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":20},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\n(Replace “cookbook-example” with the title of your cookbooks)\n\nClone the https://github.com/ProjectPythia/cookbook-example repository: git clone https://github.com/ProjectPythia/cookbook-example.git\n\nMove into the cookbook-example directorycd cookbook-example\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate cookbook-example\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":21},{"hierarchy":{"lvl1":"Initial and Boundary Conditions"},"type":"lvl1","url":"/notebooks/config/init-boundary-conditions","position":0},{"hierarchy":{"lvl1":"Initial and Boundary Conditions"},"content":"...","type":"content","url":"/notebooks/config/init-boundary-conditions","position":1},{"hierarchy":{"lvl1":"Dynamics Overview"},"type":"lvl1","url":"/notebooks/dynamics/dynamics-overview","position":0},{"hierarchy":{"lvl1":"Dynamics Overview"},"content":"...","type":"content","url":"/notebooks/dynamics/dynamics-overview","position":1},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"type":"lvl1","url":"/notebooks/intro/crash-course","position":0},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"content":"\n\n","type":"content","url":"/notebooks/intro/crash-course","position":1},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"type":"lvl1","url":"/notebooks/intro/crash-course#crash-course-towards-your-first-model","position":2},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"content":"\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#crash-course-towards-your-first-model","position":3},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/intro/crash-course#overview","position":4},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Overview"},"content":"The following notebook serves as a crash course in constructing a simple two-dimensional mesoscale atmospheric numerical model. To begin, we select a closed set of dynamical equations, in line with \n\nKlemp & Wilhelmson (1978) (hereafter KW78). Necessary assumptions are stated to simplify the equations into a manageable form to maximize both computational and educational applications. Pre-defined model configurations are presented (in an attempt) to ensure numerical stability. Equations are converted into finite-differences and then broken down into Python code to explicitly demonstrate the construction of a numerical model. Additional resources will be provided in the future regarding varying model configurations and utilizing increasingly more realistic and complex model equations.\n\n","type":"content","url":"/notebooks/intro/crash-course#overview","position":5},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/intro/crash-course#prerequisites","position":6},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nNumPy Basics\n\nNecessary\n\nHarris et al. 2020\n\nIntroduction to xarray\n\nHelpful\n\nHoyer & Hamman 2017\n\nDynamical Meteorology\n\nHelpful\n\n\n\nTime to learn: Estimated 30 to 60 minutes.\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#prerequisites","position":7},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/intro/crash-course#imports","position":8},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Imports"},"content":"Here we’ll be using a basic set of Python libraries, along with Numba for fast numerical routines. A helpful constants file is also imported, alongside the code that controls the running of the model. (For those curious, these files can be viewed \n\nhere and \n\nhere.)\n\nimport numpy as np\nimport numba\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\nfrom constants import *\nfrom driver import ModelDriver\n\n","type":"content","url":"/notebooks/intro/crash-course#imports","position":9},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Basic Equations"},"type":"lvl2","url":"/notebooks/intro/crash-course#basic-equations","position":10},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Basic Equations"},"content":"","type":"content","url":"/notebooks/intro/crash-course#basic-equations","position":11},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#starting-equations-from-kw78","position":12},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"","type":"content","url":"/notebooks/intro/crash-course#starting-equations-from-kw78","position":13},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Diagnostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl4","url":"/notebooks/intro/crash-course#diagnostics","position":14},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Diagnostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"DEQ 1. Equation of State (2.1)p = \\rho R_{d} T\n\np: Pressure\n\n\\rho: Density\n\nR_{d}: Specific gas constant for dry air\n\nT: Temperature\n\n\nDEQ 2. Exner Function (2.2)\\Pi = (\\frac{p}{p_{0}})^\\frac{R_{d}}{c_{p}}\n\n\\Pi: Non-Dimensional Pressure\n\np: Pressure\n\np_{0}: Reference Pressure\n\nR_{d}: Specific gas constant for dry air\n\nc_{p}: Specific heat at constant pressure","type":"content","url":"/notebooks/intro/crash-course#diagnostics","position":15},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Prognostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl4","url":"/notebooks/intro/crash-course#prognostics","position":16},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Prognostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"PEQ 1-2. Momentum Equation (Zonal & Vertical; 2.4)\\underset{1}{\\frac{du_{i}}{dt}}+ \n\\underset{2}{c_{p} \\overline{\\theta_{v}} \\frac{\\partial \\pi}{\\partial x_{i}} }=\n\\underset{3}{\\delta_{i_{3}}} \n\\underset{4}{g}\\left[\n\\underset{5}{\\frac{\\theta}{\\overline{\\theta}} - 1}+\n\\underset{6}{0.61(q_{v}-\\overline{q_{v}})}-\n\\underset{7}{q_{c}-q_{r}}\\right]-\n\\underset{8}{\\epsilon_{ij_{3}}}fu_{i}+ \n\\underset{9}{D_{u_i}}\n\nLagrangian of Wind\n\nPressure Gradient Force (PGF) Term\n\nKronecker Delta (i.e., the term that follows only appears from dimension 3, the vertical)\n\nGravity\n\nDry Buoyancy Contribution\n\nMoist Buoyancy Contribution\n\nWater Loading\n\nCoriolis Term\n\nTurbulence Term\n\nDerived via Navier-Stokes equations, along with DEQ1-2, Hydrostatic Function, and Linearized Pressure Term. Tensor Notation is used for simplicity.\n\n\nPEQ 3. Prognostic Equations (2.5)\\underset{1}{\\frac{d\\phi}{dt}}=\n\\underset{2}{M_{\\phi}}+ \n\\underset{3}{D_{\\phi}}\n\nLagrangian of Prognostic Variable\n\nMicrophysical Term\n\nTurbulence Term\n\n\\phi is representative of either \n\n\\theta, q_{v}, q_{r}, or \n\nq_{c}\n\n\nPEQ 4. Pressure Equation (2.7a)\\underset{1}{\\frac{\\partial\\pi}{\\partial t}}+\n\\underset{2}{\\frac{ \\overline{c}^2}{c_{p}{\\overline\\rho\\overline{\\theta_{v}^2}}}\n{\\frac{\\partial}{\\partial x_{j}}(\\overline{\\rho}\\overline{\\theta_{v}}} u_{j})}=\n\\underset{3}{f_{\\pi}}\n\nEulerian of Pressure\n\nPressure Adjustment Term\n\nNon-Relevant Terms for Sound & Gravity Waves (See KW78 2.7b)\n\nDerived using Compressible Continuity & Thermodynamic Equations; Tensor Notation Used for Simplicity\n\n","type":"content","url":"/notebooks/intro/crash-course#prognostics","position":17},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Assumptions and Simplification","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#assumptions-and-simplification","position":18},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Assumptions and Simplification","lvl2":"Basic Equations"},"content":"In this notebook we construct a two-dimensional, dry, and compressible atmospheric model that is broadly in line with KW78, though several assumptions and choice configurations were made to simplify the current model for computational and educational efficiency.\n\n\nWe will only consider the zonal (x) and vertical (z) components.\n\nBase-state variables are a function of z only, denoted by \\overline{\\phi}.\n\nWater-vapor is neglected (i.e, q_{v}, q_{r}, q_{c} = 0), so  T_{v} = T and/or \\theta_{v} = \\theta.\n\nCoriolis force, microphysics, and Turbulence are also neglected(i.e., f, M_{\\theta}, D_{\\theta} = 0).\n\nAs in KW78, the f_{\\pi} term in Pressure Equation (PEQ4-3) is neglected due to its negligible influences on convective-scale processes along with sound and gravity waves.\n\nSub-Grid Processes require parameterizations in order to achieve model closure. For example, sub-grid turbulence is first obtained using Reynolds Averaged prognostic variables (i.e., breaking up variables into mean and turbulence components), and then must be parameterized using additional assumptions (such as the flux-gradient approach).\n\nThe current test case is designed to have a calm and isentropic base-state (i.e., \\frac{\\partial \\overline\\theta}{\\partial t} and  \\overline{U} = 0)\n\n","type":"content","url":"/notebooks/intro/crash-course#assumptions-and-simplification","position":19},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Final Prognostic Equations","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#final-prognostic-equations","position":20},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Final Prognostic Equations","lvl2":"Basic Equations"},"content":"The aforementioned assumptions allowed for the derivation of the following simplified equations that serve as the foundation for the numerical model.\n\n\nEQ1. Zonal Momentum Equation\\underset{1}{\\frac{du}{dt}}+\n\\underset{2}{c_{p} \\bar{\\theta} \\frac{\\partial \\pi}{\\partial x}}\n=0\n\nLagrangian Derivative of Zonal Wind\n\nPGF Term\n\n\nEQ2. Vertical Momentum Equation\\underset{1}{\\frac{dw}{dt}}+\n\\underset{2}{c_{p} \\bar{\\theta} \\frac{\\partial \\pi}{\\partial z}}= \n\\underset{3}{g\\left[\\frac{\\theta}{\\bar{\\theta}} - 1\\right]}\n\nLagrangian Derivative of Vertical Wind\n\nPGF Term\n\nDry Buoyancy Contribution\n\n\nEQ3. Prognostic Equations\\underset{1}{\\frac{d\\theta}{dt}}\n=0\n\nLagrangian Derivative of Potential Temperature\n\n\nEQ4. Pressure Equation\\underset{1}{\\frac{\\partial\\pi}{\\partial t}}+ \n\\underset{2}{\\frac{\\overline{c}^2}{c_{p}\\overline{\\rho}\\overline{\\theta}^2}[\n\\frac{\\partial}{\\partial x}(\\overline{\\rho}\\overline{\\theta}u) +\n\\frac{\\partial}{\\partial z}(\\overline{\\rho}\\overline{\\theta}w)]} \n=0\n\nEulerian Derivative of Pressure\n\nPressure Adjustment Terms\n\n","type":"content","url":"/notebooks/intro/crash-course#final-prognostic-equations","position":21},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Model Configuration"},"type":"lvl2","url":"/notebooks/intro/crash-course#model-configuration","position":22},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Model Configuration"},"content":"Summary:\n\nThe current test case was configured using a 32 x 20 km^2 grid, including by 160 zonal grid points (nx) and 100 vertical grid points (nz), with both the horizontal and vertical grid-spacing (\\Delta x, \\Delta z) set to 200 m. Equations are integrated using a 0.1 s time-step (\\Delta t).\n\nDomain (32 km x 20 km):\n\nnx = 160\n\nnz = 100\n\ndx, dz = 200 m\n\n\nGrid Type (Staggered Grid: C) (In/Around Box-Good for Advection)\n\nMass: Centered (i,k)\n\nVelocity: Edges\n\nu (i +/- 1/2, k)\n\nw (i, k +/- 1/2)\n\n\n\n\nBoundary Conditions\n\nFree-Slip Lower\n\nRigid Top\n\nPeriodic Lateral\n\n\nInitial Conditions\n\nP_surf = 950 hPa, with remainder of atmosphere determined via hydrostatic-balance\n\nTheta = 300 K (isentropic)\n\nCalm (u, w) = 0\n\nCI: +3 K Warm Bubble \\theta^{\\prime}, with radius of 4 km centered at z = 2 km. p^{\\prime} (and thus \\pi) is adjusted accordingly.\n\n\n","type":"content","url":"/notebooks/intro/crash-course#model-configuration","position":23},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Discretization"},"type":"lvl2","url":"/notebooks/intro/crash-course#discretization","position":24},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Discretization"},"content":"","type":"content","url":"/notebooks/intro/crash-course#discretization","position":25},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"General Approach","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/crash-course#general-approach","position":26},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"General Approach","lvl2":"Discretization"},"content":"The following space/time discritezation methods were used to convert the model equations into a code-ready format.\n\nCentered Spatial Differencing, on a C-grid:\\frac{\\partial \\phi}{\\partial x_i} \\approx \\frac{\\phi_{i+\\frac{1}{2}} - \\phi_{i-\\frac{1}{2}}}{\\Delta x_i}\n\nHowever, due to averaging, many of the formulations became equivalent to centered differencing on a non-staggered grid:\\frac{\\partial \\phi}{\\partial x_i} \\approx \\frac{\\phi_{i+1} - \\phi_{i-1}}{2 \\Delta x_i}\n\nLeap-Frog Time Differencing:\\frac{\\partial \\phi}{\\partial t} \\approx \\frac{\\phi^{\\tau+1} - \\phi^{\\tau-1}}{2 \\Delta t}","type":"content","url":"/notebooks/intro/crash-course#general-approach","position":27},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/crash-course#equation-by-equation","position":28},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"","type":"content","url":"/notebooks/intro/crash-course#equation-by-equation","position":29},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"u-momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#u-momentum","position":30},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"u-momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Given our indexing notation, this equation is centered on the (i + \\frac{1}{2}, k) point.\n\nu advection Term:u\\frac{\\partial u}{\\partial x} \\cong\n\\frac{1}{2\\Delta x}u_{i + \\frac{1}{2}, k}(u_{i + \\frac{3}{2}, k}-\nu_{i - \\frac{1}{2}, k})\n\nTODO: show full derivation, not just final equation\n\nTo implement this in code, we must consider that the array indexes are whole numbers, and relative to the particular array. When we loop over the two spatial dimensions for u, this becomes:\n\n@numba.njit()\ndef u_tendency_u_advection_term(u, dx):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = u[k, i] * (u[k, i + 1] - u[k, i - 1]) / (2 * dx)\n    return term\n\nw advection term:w\\frac{\\partial u}{\\partial z} \\cong\n\\frac{1}{4}( w_{i + 1, k + \\frac{1}{2}} + w_{i + 1, k - \\frac{1}{2}} +\nw_{i, k + \\frac{1}{2}} + w_{i, k - \\frac{1}{2}})\n\\frac{1}{2\\Delta z}(u_{i + \\frac{1}{2}, k + 1} - u_{i + \\frac{1}{2}, k - 1} )\n\nTODO: show full derivation, not just final equation\n\n@numba.njit()\ndef u_tendency_w_advection_term(u, w, dz):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = 0.25 * (\n                w[k + 1, i] + w[k + 1, i - 1] + w[k, i] + w[k, i - 1] \n            ) * (u[k + 1, i] - u[k - 1, i]) / (2 * dz)\n    return term\n\nPGF Term:c_{p}\\bar{\\theta} \\frac{\\partial \\pi}{\\partial x} \\cong \nc_{p}\\bar{\\theta_{k}}\\frac{1}{\\Delta x}(\\pi_{i+1,k}-\\pi_{i,k} )\n\n@numba.njit()\ndef u_tendency_pgf_term(u, pi, theta_base, dx):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = c_p * theta_base[k] * (pi[k, i] - pi[k, i - 1]) / dx\n    return term\n\nNow, we can combine all these RHS terms, accounting for the negation/subtraction present in the full equation\n\n@numba.njit()\ndef u_tendency(u, w, pi, theta_base, dx, dz):\n    return (\n        u_tendency_u_advection_term(u, dx)\n        + u_tendency_w_advection_term(u, w, dz)\n        + u_tendency_pgf_term(u, pi, theta_base, dx)\n    ) * -1\n\n","type":"content","url":"/notebooks/intro/crash-course#u-momentum","position":31},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"w momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#w-momentum","position":32},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"w momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Here, we proceed similarly\n\nu advection term:u\\frac{\\partial w}{\\partial x} = \n\\frac{1}{4}(u_{i + \\frac{1}{2}, k + 1} +\nu_{i + \\frac{1}{2}, k} + \nu_{i - \\frac{1}{2}, k +1} +\nu_{i - \\frac{1}{2}, k})\n\\frac{1}{2\\Delta x}(w_{i + 1, k + \\frac{1}{2}} - \nw_{i - 1, k + \\frac{1}{2}})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_u_advection_term(u, w, dx):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = 0.25 * (\n                u[k, i] + u[k, i + 1] + u[k - 1, i] + u[k - 1, i + 1]  \n            ) * (w[k, i + 1] - w[k, i - 1]) / (2 * dx)\n    return term\n\nw advection term:w\\frac{\\partial w}{\\partial z}=\nw_{i, k + \\frac{1}{2}}\n\\frac{1}{2\\Delta z} (w_{i, k + \\frac{3}{2}} - w_{i-1, \\frac{1}{2}})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_w_advection_term(w, dz):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = w[k, i] * (w[k + 1, i] - w[k - 1, i]) / (2 * dz)\n    return term\n\nPGF term:c_{p}\\overline{\\theta}\\frac{\\partial \\pi}{\\partial z} =\nc_{p} \\frac{1}{2}( \\overline{\\theta}_{k+1} + \\overline{\\theta}_{k})\n\\frac{1}{\\Delta z}(\\pi_{i, k+1} - \\pi_{i,k})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_pgf_term(w, pi, theta_base, dz):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = c_p * 0.5 * (theta_base[k] + theta_base[k - 1]) * (pi[k - 1, i] - pi[k, i]) / dz\n    return term\n\nBuoyancy Term:g\\left[\\frac{\\theta^{\\prime}}{\\overline{\\theta}}\\right] =\n  g\\left[\\frac{\\theta_{i, k+1}^{\\prime} + \\theta_{i, k}^{\\prime}}{\\overline{\\theta}_{k+1}, \\overline{\\theta}_{k}}\\right]\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_buoyancy_term(w, theta_p, theta_base):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = gravity * (theta_p[k, i] + theta_p[k - 1, i]) / (theta_base[k] + theta_base[k - 1]) \n    return term\n\nWhich, in combination, becomes:\n\n@numba.njit()\ndef w_tendency(u, w, pi, theta_p, theta_base, dx, dz):\n    return (\n        w_tendency_u_advection_term(u, w, dx) * -1.0\n        - w_tendency_w_advection_term(w, dz)\n        - w_tendency_pgf_term(w, pi, theta_base, dz)\n        + w_tendency_buoyancy_term(w, theta_p, theta_base)\n    )\n\n","type":"content","url":"/notebooks/intro/crash-course#w-momentum","position":33},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Theta tendency equation","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#theta-tendency-equation","position":34},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Theta tendency equation","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"u advection term:u\\frac{\\partial \\theta^{\\prime}}{\\partial x} = \n       \\frac{1}{2}(u_{i+\\frac{1}{2}, k} + u_{i-\\frac{1}{2}})\n       \\frac{1}{2\\Delta x}(\\theta_{i+1,k}^{\\prime}-\\theta_{i-1,k}^{\\prime})\n\n@numba.njit()\ndef theta_p_tendency_u_advection_term(u, theta_p, dx):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (u[k, i + 1] + u[k, i]) / 2\n                * (theta_p[k, i + 1] - theta_p[k, i - 1]) / (2 * dx)\n            )\n    return term\n\nw advection of theta perturbation:w\\frac{\\partial \\theta^{\\prime}}{\\partial z} = \n       \\frac{1}{2}(w_{i+\\frac{1}{2}, k} + w_{i-\\frac{1}{2}})\n       \\frac{1}{2\\Delta z}(\\theta_{i,k+1}^{\\prime}-\\theta_{i,k-1}^{\\prime})\n\n@numba.njit()\ndef theta_p_tendency_w_advection_of_perturbation_term(w, theta_p, dz):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (w[k + 1, i] + w[k, i]) / 2\n                * (theta_p[k + 1, i] - theta_p[k - 1, i]) / (2 * dz)\n            )\n    return term\n\nw advection of theta base state:w\\frac{\\partial \\overline{\\theta}}{\\partial z} = \n   \\frac{1}{2}(w_{i, k+\\frac{1}{2}} + w_{i,k\\frac{1}{2}})\n   \\frac{1}{2\\Delta z}(\\overline{\\theta}_{k+1}-\\overline\\theta_{k-1})\n\n@numba.njit()\ndef theta_p_tendency_w_advection_of_base_term(w, theta_p, theta_base, dz):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (w[k + 1, i] + w[k, i]) / 2\n                * (theta_base[k + 1] - theta_base[k - 1]) / (2 * dz)\n            )\n    return term\n\nCombining, becomes:\n\n@numba.njit()\ndef theta_p_tendency(u, w, theta_p, theta_base, dx, dz):\n    return (\n        theta_p_tendency_u_advection_term(u, theta_p, dx)\n        + theta_p_tendency_w_advection_of_perturbation_term(w, theta_p, dz)\n        + theta_p_tendency_w_advection_of_base_term(w, theta_p, theta_base, dz)\n    ) * -1\n\n","type":"content","url":"/notebooks/intro/crash-course#theta-tendency-equation","position":35},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Non-dimensional Pressure Tendency","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#non-dimensional-pressure-tendency","position":36},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Non-dimensional Pressure Tendency","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Based on the treatment by KW78, this equation expressed with a leading factor (which has k-index dependence) and two interior terms (which have finite differences). We express these together as:\\begin{align*}\n-\\frac{\\bar{c}^2}{c_p \\bar{\\rho}_k \\bar{\\theta}_k^2}\\bigg[ &\\bar{\\rho}_k \\bar{\\theta}_k \\frac{1}{\\Delta x} \\left(u_{i + \\frac{1}{2}, k} - u_{i - \\frac{1}{2}, k}\\right) \\\\\n\\quad\\quad &+ \\frac{1}{2}\\left(w_{i, k+\\frac{1}{2}} + w_{i, k-\\frac{1}{2}}\\right) \\frac{1}{2\\Delta z} \\left(\\bar{\\rho}_{k+1} \\bar{\\theta}_{k+1} - \\bar{\\rho}_{k-1} \\bar{\\theta}_{k-1}\\right) \\\\\n\\quad\\quad &+ \\bar{\\rho}_k \\bar{\\theta}_k \\frac{1}{\\Delta z} \\left(w_{i , k+ \\frac{1}{2}} - w_{i, k - \\frac{1}{2}}\\right)\\bigg]\n\\end{align*}\n\n@numba.njit()\ndef pi_tendency(u, w, pi, theta_base, rho_base, c_s_sqr, dx, dz):\n    term = np.zeros_like(pi)\n    for k in range(1, pi.shape[0] - 1):\n        for i in range(1, pi.shape[1] - 1):\n            term[k, i] = (\n                -1 * (c_s_sqr / (c_p * rho_base[k] * theta_base[k]**2))\n                * (\n                    (rho_base[k] * theta_base[k] * (u[k, i + 1] - u[k, i]) / dx)\n                    + (\n                        (w[k + 1, i] + w[k, i]) / 2\n                        * (rho_base[k + 1] * theta_base[k + 1] - rho_base[k - 1] * theta_base[k - 1]) / (2 * dz)\n                    )\n                    + (rho_base[k] * theta_base[k] * (w[k + 1, i] - w[k, i]) / dz)\n                )\n            )\n    return term\n\n","type":"content","url":"/notebooks/intro/crash-course#non-dimensional-pressure-tendency","position":37},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Running the Model"},"type":"lvl2","url":"/notebooks/intro/crash-course#running-the-model","position":38},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Running the Model"},"content":"We are now ready to set up and run the model!","type":"content","url":"/notebooks/intro/crash-course#running-the-model","position":39},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Setup","lvl2":"Running the Model"},"type":"lvl3","url":"/notebooks/intro/crash-course#setup","position":40},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Setup","lvl2":"Running the Model"},"content":"To start, we initialize the model driver class (see the \n\ndriver.py if interested in the details) using our aforementioned model options, and plugging in our tendency equations written above. We then add in the initial base state and perturbations, so that the model has something to simulate. Finally, we export the initial state to inspect later:\n\n# Set up model\nmodel = ModelDriver(\n    nx=160, nz=100, dx=200., dz=200., dt=0.01, c_s_sqr=50.0**2,\n    u_tendency=u_tendency, w_tendency=w_tendency, theta_p_tendency=theta_p_tendency, pi_tendency=pi_tendency\n)\nmodel.initialize_isentropic_base_state(300., 9.5e4)\nmodel.initialize_warm_bubble(3.0, 4.0e3, 4.0e3, 2.0e3)\n\n# Start saving results\nresults = []\nresults.append(model.current_state())\n\nWe can quickly preview what this initial warm bubble looks like using xarray:\n\nresults[0]['theta_p'][0].plot.imshow(vmin=-3, vmax=3, cmap='RdBu_r')\n\n","type":"content","url":"/notebooks/intro/crash-course#setup","position":41},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Running the model forward in time","lvl3":"Setup","lvl2":"Running the Model"},"type":"lvl4","url":"/notebooks/intro/crash-course#running-the-model-forward-in-time","position":42},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Running the model forward in time","lvl3":"Setup","lvl2":"Running the Model"},"content":"Now, we can actually start integrating in time. At the first timestep, we don’t have the data to use leapfrog integration, so we need a special first timestep that does a forward-in-time approach (also known as Euler forward differencing):\n\n# Integrate the model, saving after desired timestep counts\nmodel.take_first_timestep()\nresults.append(model.current_state())\n\nTODO: fix/adjust approach later\n\nNow, the model (as written above) has been found to have a numerical instability that causes the model to “explode” within 30 seconds of simulated time. To showcase how such a model can go wrong, we save results every timestep, as follows:\n\nfor _ in range(3000):\n    model.integrate(1)\n    results.append(model.current_state())\n\n# Merge results\nds = xr.concat(results, 't')\n\nTODO: add holoviews visualization of “what’s going wrong”\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#running-the-model-forward-in-time","position":43},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/intro/crash-course#summary","position":44},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Summary"},"content":"The preceding cookbook provided a crash-course on the development of a 2-D Mesoscale Numerical Model, starting with the basic dynamical equations through the conversion to computer code and ultimately model integration. This pre-configured “test-case” is intended to be used for educational purposes only. Note that all the assumptions/configurations used herein may not be applicable for other situations. Future notebooks are to be included, demonstrating how various configurations (i.e., equation simplifications, discretization schemes, boundary conditions, grid styles, and spatiotemporal resolutions) all influences the performance and accuracy of the resultant output. Additionally, we plan to include explicit walk-throughs regarding stability analyses, corrections, and filtering techniques. Check-in regularly for updates to this Cookbook.","type":"content","url":"/notebooks/intro/crash-course#summary","position":45},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/notebooks/intro/crash-course#whats-next","position":46},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"What’s next?","lvl2":"Summary"},"content":"TODO: reference later portionsLet Jupyter book tie this to the next (sequential) piece of content that people could move on to down below and in the sidebar. However, if this page uniquely enables your reader to tackle other nonsequential concepts throughout this book, or even external content, link to it here!\n\n","type":"content","url":"/notebooks/intro/crash-course#whats-next","position":47},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Resources"},"type":"lvl2","url":"/notebooks/intro/crash-course#resources","position":48},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Resources"},"content":"TODO: add these\nFinally, be rigorous in your citations and references as necessary. Give credit where credit is due. Also, feel free to link to relevant external material, further reading, documentation, etc. Then you're done! Give yourself a quick review, a high five, and send us a pull request. A few final notes:\n - `Kernel > Restart Kernel and Run All Cells...` to confirm that your notebook will cleanly run from start to finish\n - `Kernel > Restart Kernel and Clear All Outputs...` before committing your notebook, our machines will do the heavy lifting\n - Take credit! Provide author contact information if you'd like; if so, consider adding information here at the bottom of your notebook\n - Give credit! Attribute appropriate authorship for referenced code, information, images, etc.\n - Only include what you're legally allowed: **no copyright infringement or plagiarism**\n \nThank you for your contribution!\n","type":"content","url":"/notebooks/intro/crash-course#resources","position":49},{"hierarchy":{"lvl1":"Improving 2D Model"},"type":"lvl1","url":"/notebooks/intro/improving-model","position":0},{"hierarchy":{"lvl1":"Improving 2D Model"},"content":"","type":"content","url":"/notebooks/intro/improving-model","position":1},{"hierarchy":{"lvl1":"Initial Concepts"},"type":"lvl1","url":"/notebooks/intro/initial-concepts","position":0},{"hierarchy":{"lvl1":"Initial Concepts"},"content":"...","type":"content","url":"/notebooks/intro/initial-concepts","position":1},{"hierarchy":{"lvl1":"Gill-Matsuno Model"},"type":"lvl1","url":"/notebooks/intro/matsuno-gill","position":0},{"hierarchy":{"lvl1":"Gill-Matsuno Model"},"content":"","type":"content","url":"/notebooks/intro/matsuno-gill","position":1},{"hierarchy":{"lvl1":"Troubleshooting"},"type":"lvl1","url":"/notebooks/intro/troubleshooting","position":0},{"hierarchy":{"lvl1":"Troubleshooting"},"content":"","type":"content","url":"/notebooks/intro/troubleshooting","position":1},{"hierarchy":{"lvl1":"Finite Differencing"},"type":"lvl1","url":"/notebooks/numerics/finite-differencing","position":0},{"hierarchy":{"lvl1":"Finite Differencing"},"content":"...","type":"content","url":"/notebooks/numerics/finite-differencing","position":1},{"hierarchy":{"lvl1":"Summary"},"type":"lvl1","url":"/notebooks/summary/summary","position":0},{"hierarchy":{"lvl1":"Summary"},"content":"...","type":"content","url":"/notebooks/summary/summary","position":1}]}