{"version":"1","records":[{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers the fundamentals of atmospheric modeling, including topics such as:\n\nbasic conservation equations\n\napproaches to finite differencing\n\nnumerical scheme assessments\n\nnumerical corrections and filtering\n\ncoordinate systems\n\ninitial/boundary conditions\n\nlimitations and tradeoffs in modeling","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Motivation"},"content":"Numerical models are widely used, but gaining expertise in how they work has often been unnecessarily challenging. This cookbook hopes to address that! This is intended for a somewhat broad audience: those with at least some atmospheric dynamics knowledge, but nearly any level of programming experience (assuming a baseline level as covered in the \n\nPythia Foundations).","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Authors"},"content":"JT Thielen\n\nSam Gardner\n\nRoger Riggin\n\nJustin Spotts\n\nMathieu R\n\nKevin Tyle\n\nBrittany Freeman\n\nSnigdha Samantaray\n\nLin Wu\n\nShreya Keshri\n\nGerardo Rivera Tello","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"\n\nAddition contributions to discussions and decisions for this notebook by:\n\nRachel Smith","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Resources"},"type":"lvl2","url":"/#resources","position":8},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Resources"},"content":"This cookbook would not be possible without the vast collection of academic texts and prior work in atmospheric modeling. The key resources used in building this notebook include:\n\nTextbooks\n\nAn Introduction to Numerical Modeling of the Atmosphere, by David Randall\n\nMesoscale Meteorological Modeling, 2nd Edition, by Roger Piekle\n\nIntroduction to geophysical fluid dynamics: Physical and numerical aspects\n\nJournal Articles\n\n...\n\nOther Resources\n\nPet Tornado, by Brian Fiedler\n\nIncompressible flow buoyant bubble","type":"content","url":"/#resources","position":9},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Structure"},"content":"(State one or more sections that will comprise the notebook. E.g., This cookbook is broken up into two main sections - “Foundations” and “Example Workflows.” Then, describe each section below.)","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 1 ( Replace with the title of this section, e.g. “Foundations” )","lvl2":"Structure"},"type":"lvl3","url":"/#section-1-replace-with-the-title-of-this-section-e-g-foundations","position":12},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 1 ( Replace with the title of this section, e.g. “Foundations” )","lvl2":"Structure"},"content":"(Add content for this section, e.g., \"The foundational content includes ... \")","type":"content","url":"/#section-1-replace-with-the-title-of-this-section-e-g-foundations","position":13},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 2 ( Replace with the title of this section, e.g. “Example workflows” )","lvl2":"Structure"},"type":"lvl3","url":"/#section-2-replace-with-the-title-of-this-section-e-g-example-workflows","position":14},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Section 2 ( Replace with the title of this section, e.g. “Example workflows” )","lvl2":"Structure"},"content":"(Add content for this section, e.g., \"Example workflows include ... \")","type":"content","url":"/#section-2-replace-with-the-title-of-this-section-e-g-example-workflows","position":15},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":18},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":19},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":20},{"hierarchy":{"lvl1":"Fundamentals of Atmospheric Modeling Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\n(Replace “cookbook-example” with the title of your cookbooks)\n\nClone the https://github.com/ProjectPythia/cookbook-example repository: git clone https://github.com/ProjectPythia/cookbook-example.git\n\nMove into the cookbook-example directorycd cookbook-example\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate cookbook-example\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":21},{"hierarchy":{"lvl1":"Finite Differencing"},"type":"lvl1","url":"/notebooks/appendix/finite-differencing","position":0},{"hierarchy":{"lvl1":"Finite Differencing"},"content":"Here we compile the standard finite difference schemes of various orders on uniform grids.\n\nConsider the derivative du/dx of a function u(x), where x can be any independent variable (e.g., time, space, etc.). Finite-difference approximations are used to represent the continuous function u(x) by a set of discrete points u^n at evenly spaced intervals, where n is the index of the point in the grid. The spacing between these points is denoted as \\Delta x.\n\n\n\nFigure 1:Example of a one-dimensional grid with uniform spacing \\Delta x.\n\nBig \\mathcal{O} Notation\n\nThe notation \\mathcal{O}(\\cdot), known as Big \\mathcal{O} notation, describes the truncation error of the approximation. It provides insight into how quickly the error shrinks as you decrease the step size, \\Delta x.\n\nFeature\n\nFirst-Order Error (\\mathcal{O}(\\Delta x))\n\nSecond-Order Error (\\mathcal{O}(\\Delta x^2))\n\nProportionality\n\nError is proportional to the step size, \\Delta x.\n\nError is proportional to the square of the step size, \\Delta x^2.\n\nConvergence Rate\n\nLinear\n\nQuadratic\n\nEffect of Halving \\Delta x\n\nError is reduced by a factor of 2 (halved).\n\nError is reduced by a factor of 4 (quartered).\n\nAccuracy\n\nLower\n\nHigher","type":"content","url":"/notebooks/appendix/finite-differencing","position":1},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Forward Difference"},"type":"lvl2","url":"/notebooks/appendix/finite-differencing#forward-difference","position":2},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Forward Difference"},"content":"","type":"content","url":"/notebooks/appendix/finite-differencing#forward-difference","position":3},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Forward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x","position":4},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Forward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^{n+1} - u^n}{\\Delta x}\n\n\\frac{-u^{n+2} + 4u^{n+1} - 3u^n}{2\\Delta x}","type":"content","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x","position":5},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Forward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2","position":6},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Forward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^{n+2} - 2u^{n+1} + u^n}{\\Delta x^2}\n\n\\frac{-u^{n+3} + 4u^{n+2} - 5u^{n+1} + 2u^n}{\\Delta x^2}","type":"content","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2","position":7},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Forward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3","position":8},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Forward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^{n+3} - 3u^{n+2} + 3u^{n+1} - u^n}{\\Delta x^3}\n\n\\frac{-3u^{n+4} + 14u^{n+3} - 24u^{n+2} + 18u^{n+1} - 5u^n}{2\\Delta x^3}","type":"content","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3","position":9},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Forward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4","position":10},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Forward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^{n+4} - 4u^{n+3} + 6u^{n+2} - 4u^{n+1} + u^n}{\\Delta x^4}\n\n\\frac{-2u^{n+5} + 11u^{n+4} - 24u^{n+3} + 26u^{n+2} - 14u^{n+1} + 3u^n}{\\Delta x^4}","type":"content","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4","position":11},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Backward Difference"},"type":"lvl2","url":"/notebooks/appendix/finite-differencing#backward-difference","position":12},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Backward Difference"},"content":"","type":"content","url":"/notebooks/appendix/finite-differencing#backward-difference","position":13},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Backward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x-1","position":14},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Backward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^n - u^{n-1}}{\\Delta x}\n\n\\frac{3u^n - 4u^{n-1} + u^{n-2}}{2\\Delta x}","type":"content","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x-1","position":15},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Backward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2-1","position":16},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Backward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^n - 2u^{n-1} + u^{n-2}}{\\Delta x^2}\n\n\\frac{2u^n - 5u^{n-1} + 4u^{n-2} - u^{n-3}}{\\Delta x^2}","type":"content","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2-1","position":17},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Backward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3-1","position":18},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Backward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^n - 3u^{n-1} + 3u^{n-2} - u^{n-3}}{\\Delta x^3}\n\n\\frac{5u^n - 18u^{n-1} + 24u^{n-2} - 14u^{n-3} + 3u^{n-4}}{2\\Delta x^3}","type":"content","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3-1","position":19},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Backward Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4-1","position":20},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Backward Difference"},"content":"\\mathcal{O}(\\Delta x)\n\n\\mathcal{O}(\\Delta x^2)\n\n\\frac{u^n - 4u^{n-1} + 6u^{n-2} - 4u^{n-3} + u^{n-4}}{\\Delta x^4}\n\n\\frac{3u^n - 14u^{n-1} + 26u^{n-2} - 24u^{n-3} + 11u^{n-4} - 2u^{n-5}}{\\Delta x^4}","type":"content","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4-1","position":21},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Central Difference"},"type":"lvl2","url":"/notebooks/appendix/finite-differencing#central-difference","position":22},{"hierarchy":{"lvl1":"Finite Differencing","lvl2":"Central Difference"},"content":"","type":"content","url":"/notebooks/appendix/finite-differencing#central-difference","position":23},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Central Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x-2","position":24},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"First Derivative (\\frac{\\partial u}{\\partial x})","lvl2":"Central Difference"},"content":"\\mathcal{O}(\\Delta x^2)\n\n\\mathcal{O}(\\Delta x^4)\n\n\\frac{u^{n+1} - u^{n-1}}{2\\Delta x}\n\n\\frac{-u^{n+2} + 8u^{n+1} - 8u^{n-1} + u^{n-2}}{12\\Delta x}","type":"content","url":"/notebooks/appendix/finite-differencing#first-derivative-frac-partial-u-partial-x-2","position":25},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Central Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2-2","position":26},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Second Derivative (\\frac{\\partial^2 u}{\\partial x^2})","lvl2":"Central Difference"},"content":"\\mathcal{O}(\\Delta x^2)\n\n\\mathcal{O}(\\Delta x^4)\n\n\\frac{u^{n+1} - 2u^n + u^{n-1}}{\\Delta x^2}\n\n\\frac{-u^{n+2} + 16u^{n+1} - 30u^n + 16u^{n-1} - u^{n-2}}{12\\Delta x^2}","type":"content","url":"/notebooks/appendix/finite-differencing#second-derivative-frac-partial-2-u-partial-x-2-2","position":27},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Central Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3-2","position":28},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Third Derivative (\\frac{\\partial^3 u}{\\partial x^3})","lvl2":"Central Difference"},"content":"\\mathcal{O}(\\Delta x^2)\n\n\\mathcal{O}(\\Delta x^4)\n\n\\frac{u^{n+2} + 2u^{n+1} - 2u^{n-1} - u^{n-2}}{2\\Delta x^3}\n\n\\frac{-u^{n+3} + 8u^{n+2} - 13u^{n+1} + 13u^{n-1} - 8u^{n-2} + u^{n-3}}{8\\Delta x^3}","type":"content","url":"/notebooks/appendix/finite-differencing#third-derivative-frac-partial-3-u-partial-x-3-2","position":29},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Central Difference"},"type":"lvl3","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4-2","position":30},{"hierarchy":{"lvl1":"Finite Differencing","lvl3":"Fourth Derivative (\\frac{\\partial^4 u}{\\partial x^4})","lvl2":"Central Difference"},"content":"\\mathcal{O}(\\Delta x^2)\n\n\\mathcal{O}(\\Delta x^4)\n\n\\frac{u^{n+2} - 4u^{n+1} + 6u^n - 4u^{n-1} + u^{n-2}}{\\Delta x^4}\n\n\\frac{-u^{n+3} + 12u^{n+2} - 39u^{n+1} + 56u^n - 39u^{n-1} + 12u^{n-2} - u^{n-3}}{6\\Delta x^4}","type":"content","url":"/notebooks/appendix/finite-differencing#fourth-derivative-frac-partial-4-u-partial-x-4-2","position":31},{"hierarchy":{"lvl1":"Time Stepping"},"type":"lvl1","url":"/notebooks/appendix/time-stepping","position":0},{"hierarchy":{"lvl1":"Time Stepping"},"content":"In numerical weather prediction and climate modeling, time stepping refers to the process of advancing the simulation in time. This is typically done by discretizing the time domain into small intervals, or “time steps,” and updating the state of the system at each time step based on the governing equations.\n\nThere are several methods for time stepping, each with its own advantages and disadvantages. This section is a reference of the most commonly used algorithms.\n\nGiven an equation for the tendency of a random variable\\frac{\\partial u}{\\partial t} = Q(t,u)","type":"content","url":"/notebooks/appendix/time-stepping","position":1},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Euler methods"},"type":"lvl2","url":"/notebooks/appendix/time-stepping#euler-methods","position":2},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Euler methods"},"content":"These methods are used to approximate the solution to a differential equation by starting at an initial point and taking a series of small, discrete steps forward in time.\n\nMethod\n\nScheme\n\nOrder\n\nExplicit\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\Delta t Q^\\tau\n\n\\Delta t\n\nImplicit\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\Delta t Q^{\\tau+1}\n\n\\Delta t\n\nTrapezoidal\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\frac{\\Delta t}{2}(Q^\\tau + Q^{\\tau+1})\n\n\\Delta t^2\n\nGeneral\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\Delta t((1-\\alpha)Q^\\tau + \\alpha Q^{\\tau+1})\n\n\\Delta t\n\nGeneral Method\n\nThis is a flexible framework that combines the explicit and implicit methods using a weighting factor, \\alpha.\n\nIf \\alpha=0, it is the fully explicit method.\n\nIf \\alpha=1, it is the fully implicit method.\n\nIf \\alpha=0.5, it becomes the trapezoidal rule.\n\nThis allows for a tunable balance between the computational ease of the explicit method and the stability of the implicit method.","type":"content","url":"/notebooks/appendix/time-stepping#euler-methods","position":3},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Multistep methods"},"type":"lvl2","url":"/notebooks/appendix/time-stepping#multistep-methods","position":4},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Multistep methods"},"content":"Unlike single-step methods that only use information from the most recent time step, multistep methods increase accuracy by using information from several previous steps to compute the next step.\n\nMethod\n\nScheme\n\nTruncation Order\n\nLeapfrog\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^{\\tau-1} + 2\\Delta t Q^\\tau\n\n\\Delta t^2\n\nAdams-Bashforth\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\frac{\\Delta t}{2}(-Q^{\\tau-1} + 3Q^\\tau)\n\n\\Delta t^2\n\nAdams-Moulton\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\frac{\\Delta t}{12}(-Q^{\\tau-1} + 8Q^\\tau + 5Q^{\\tau+1})\n\n\\Delta t^3\n\nAdams-Bashforth\n\n\\tilde{u}^{\\tau+1} = \\tilde{u}^\\tau + \\frac{\\Delta t}{12}(5Q^{\\tau-2} - 16Q^{\\tau-1} + 23Q^{\\tau+1})\n\n\\Delta t^3\n\nLeapfrog\n\nThe leapfrog method is an explicit, second-order method that is popular for simulating physical systems. It gets its name because it “leaps” over the current point (u^\\tau) to calculate the next point (u^{\\tau+1}) using the derivative at u^\\tau and the value from the previous point, u^{\\tau-1}. This structure helps conserve energy in long-term simulations but can sometimes lead to instability.","type":"content","url":"/notebooks/appendix/time-stepping#multistep-methods","position":5},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Multistage methods"},"type":"lvl2","url":"/notebooks/appendix/time-stepping#multistage-methods","position":6},{"hierarchy":{"lvl1":"Time Stepping","lvl2":"Multistage methods"},"content":"Multistage methods calculate the solution at the next time step by performing several intermediate calculations, or “stages,” within a single time interval. Instead of using data from previous time steps (like multistep methods), they evaluate the derivative function multiple times between the current and next points to get a more accurate slope estimate.\n\nThe core idea is to take a “trial” step, re-evaluate the derivative at this new trial position, and then use this more accurate information to take the final, full step.\n\n2nd-Order RK: Often called the midpoint method, this scheme first takes a half-step to the midpoint of the time interval. It then uses the derivative calculated at that midpoint to compute the full step, which is more accurate than just using the derivative from the start of the interval.\n\n4th-Order RK: This is one of the most widely used numerical methods for solving differential equations. It achieves very high accuracy by cleverly performing four derivative evaluations within each time step: one at the beginning, two at the midpoint, and one at the end of the interval. These are combined in a weighted average to produce a result that is remarkably accurate and robust.\n\nMethod\n\nScheme\n\nOrder\n\nRunge-Kutta (2nd Order)\n\n\\begin{aligned} \\tilde{u}^{\\tau+1/2} &= \\tilde{u}^\\tau + \\frac{\\Delta t}{2}Q(t^\\tau, \\tilde{u}^\\tau) \\\\ \\tilde{u}^{\\tau+1} &= \\tilde{u}^\\tau + \\Delta t Q(t^{\\tau+1/2}, \\tilde{u}^{\\tau+1/2}) \\end{aligned}\n\n\\Delta t^2\n\nRunge-Kutta (4th Order)\n\n\\begin{aligned} \\tilde{u}_a^{\\tau+1/2} &= \\tilde{u}^\\tau + \\frac{\\Delta t}{2}Q(t^\\tau, \\tilde{u}^\\tau) \\\\ \\tilde{u}_b^{\\tau+1/2} &= \\tilde{u}^\\tau + \\frac{\\Delta t}{2}Q(t^{\\tau+1/2}, \\tilde{u}_a^{\\tau+1/2}) \\\\ \\tilde{u}^* &= \\tilde{u}^\\tau + \\Delta t Q(t^{\\tau+1/2}, \\tilde{u}_b^{\\tau+1/2}) \\\\ \\tilde{u}^{\\tau+1} &= \\tilde{u}^\\tau + \\frac{\\Delta t}{6} \\big( Q(t^\\tau, \\tilde{u}^\\tau) + 2Q(t^{\\tau+1/2}, \\tilde{u}_a^{\\tau+1/2}) \\\\ &+ 2Q(t^{\\tau+1/2}, \\tilde{u}_b^{\\tau+1/2}) + Q(t^{\\tau+1}, \\tilde{u}^*) \\big) \\end{aligned}\n\n\\Delta t^4","type":"content","url":"/notebooks/appendix/time-stepping#multistage-methods","position":7},{"hierarchy":{"lvl1":"Coordinates and Initial/Boundary Conditions"},"type":"lvl1","url":"/notebooks/config/init-boundary-conditions","position":0},{"hierarchy":{"lvl1":"Coordinates and Initial/Boundary Conditions"},"content":"In the prior section when we discussed methods of solution, we did not explore all the considerations involved in the coordinate systems of the grids upon which the equations are discretized, nor the initial and boundary conditions that help define and constrain the solutions. Those will be the focus of this future chapter. In particular, we will showcase different representations of geospatial coordinates, the advantages and disadvantages of various grid staggering techniques, vertical coordinate systems, and the different varieties of boundary conditions (for the horizontal, model bottom, and model top). While these sections of the cookbook are not yet available in its current version, we suggest exploring the following resources if you wish to learn more about these topics in the meantime:\n\nChapters 6 and 11 of \n\nPielke (2002)","type":"content","url":"/notebooks/config/init-boundary-conditions","position":1},{"hierarchy":{"lvl1":"Dynamics Overview"},"type":"lvl1","url":"/notebooks/dynamics/dynamics-overview","position":0},{"hierarchy":{"lvl1":"Dynamics Overview"},"content":"In order to have a computational model that solves predictive equations, we need to understand what equations we are trying to solve! In this future chapter, we will (a) introduce the fundamental equations of the atmosphere used in dynamical models (i.e., the “Basic Equations”), (b) show how they can be simplified in order to make solutions tractable, (c) separate them into base state and perturbation components (i.e., Reynolds Averaging), and finally (d) show how they might be analyzed in their continuous forms prior to discretization. While these sections of the cookbook are not yet available in its current version, we suggest exploring the following resources if you wish to learn more about these topics in the meantime:\n\nChapters 2–5 of \n\nPielke (2002)\n\nCushman-Roisin & Beckers (2011)","type":"content","url":"/notebooks/dynamics/dynamics-overview","position":1},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"type":"lvl1","url":"/notebooks/intro/crash-course","position":0},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"content":"\n\n","type":"content","url":"/notebooks/intro/crash-course","position":1},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"type":"lvl1","url":"/notebooks/intro/crash-course#crash-course-towards-your-first-model","position":2},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model"},"content":"\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#crash-course-towards-your-first-model","position":3},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/intro/crash-course#overview","position":4},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Overview"},"content":"The following notebook serves as a crash course in constructing a simple two-dimensional mesoscale atmospheric numerical model. To begin, we select a closed set of dynamical equations, in line with \n\nKlemp & Wilhelmson (1978) (hereafter KW78). Necessary assumptions are stated to simplify the equations into a manageable form to maximize both computational and educational applications. Pre-defined model configurations are presented (in an attempt) to ensure numerical stability. Equations are converted into finite-differences and then broken down into Python code to explicitly demonstrate the construction of a numerical model. Additional resources will be provided in the future regarding varying model configurations and utilizing increasingly more realistic and complex model equations.\n\n","type":"content","url":"/notebooks/intro/crash-course#overview","position":5},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/intro/crash-course#prerequisites","position":6},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nNumPy Basics\n\nNecessary\n\nHarris et al. 2020\n\nIntroduction to xarray\n\nHelpful\n\nHoyer & Hamman 2017\n\nDynamical Meteorology\n\nHelpful\n\n\n\nTime to learn: Estimated 30 to 60 minutes.\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#prerequisites","position":7},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/intro/crash-course#imports","position":8},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Imports"},"content":"Here we’ll be using a basic set of Python libraries, along with Numba for fast numerical routines. A helpful constants file is also imported, alongside the code that controls the running of the model. (For those curious, these files can be viewed \n\nhere and \n\nhere.)\n\nimport numpy as np\nimport numba\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\nfrom constants import *\nfrom driver import ModelDriver\nfrom model_visualization import ModelVis, quiver_theta_panel, plot_cfl_timeseries, cfl_quiver_row\n\n","type":"content","url":"/notebooks/intro/crash-course#imports","position":9},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Basic Equations"},"type":"lvl2","url":"/notebooks/intro/crash-course#basic-equations","position":10},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Basic Equations"},"content":"","type":"content","url":"/notebooks/intro/crash-course#basic-equations","position":11},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#starting-equations-from-kw78","position":12},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"","type":"content","url":"/notebooks/intro/crash-course#starting-equations-from-kw78","position":13},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Diagnostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl4","url":"/notebooks/intro/crash-course#diagnostics","position":14},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Diagnostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"DEQ 1. Equation of State (2.1)p = \\rho R_{d} T\n\np: Pressure\n\n\\rho: Density\n\nR_{d}: Specific gas constant for dry air\n\nT: Temperature\n\n\nDEQ 2. Exner Function (2.2)\\Pi = (\\frac{p}{p_{0}})^\\frac{R_{d}}{c_{p}}\n\n\\Pi: Non-Dimensional Pressure\n\np: Pressure\n\np_{0}: Reference Pressure\n\nR_{d}: Specific gas constant for dry air\n\nc_{p}: Specific heat at constant pressure","type":"content","url":"/notebooks/intro/crash-course#diagnostics","position":15},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Prognostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"type":"lvl4","url":"/notebooks/intro/crash-course#prognostics","position":16},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Prognostics","lvl3":"Starting Equations (from KW78)","lvl2":"Basic Equations"},"content":"PEQ 1-2. Momentum Equation (Zonal & Vertical; 2.4)\\underset{1}{\\frac{du_{i}}{dt}}+ \n\\underset{2}{c_{p} \\overline{\\theta_{v}} \\frac{\\partial \\pi}{\\partial x_{i}} }=\n\\underset{3}{\\delta_{i_{3}}} \n\\underset{4}{g}\\left[\n\\underset{5}{\\frac{\\theta}{\\overline{\\theta}} - 1}+\n\\underset{6}{0.61(q_{v}-\\overline{q_{v}})}-\n\\underset{7}{q_{c}-q_{r}}\\right]-\n\\underset{8}{\\epsilon_{ij_{3}}}fu_{i}+ \n\\underset{9}{D_{u_i}}\n\nLagrangian of Wind\n\nPressure Gradient Force (PGF) Term\n\nKronecker Delta (i.e., the term that follows only appears from dimension 3, the vertical)\n\nGravity\n\nDry Buoyancy Contribution\n\nMoist Buoyancy Contribution\n\nWater Loading\n\nCoriolis Term\n\nTurbulence Term\n\nDerived via Navier-Stokes equations, along with DEQ1-2, Hydrostatic Function, and Linearized Pressure Term. Tensor Notation is used for simplicity.\n\n\nPEQ 3. Prognostic Equations (2.5)\\underset{1}{\\frac{d\\phi}{dt}}=\n\\underset{2}{M_{\\phi}}+ \n\\underset{3}{D_{\\phi}}\n\nLagrangian of Prognostic Variable\n\nMicrophysical Term\n\nTurbulence Term\n\n\\phi is representative of either \n\n\\theta, q_{v}, q_{r}, or \n\nq_{c}\n\n\nPEQ 4. Pressure Equation (2.7a)\\underset{1}{\\frac{\\partial\\pi}{\\partial t}}+\n\\underset{2}{\\frac{ \\overline{c}^2}{c_{p}{\\overline\\rho\\overline{\\theta_{v}^2}}}\n{\\frac{\\partial}{\\partial x_{j}}(\\overline{\\rho}\\overline{\\theta_{v}}} u_{j})}=\n\\underset{3}{f_{\\pi}}\n\nEulerian of Pressure\n\nPressure Adjustment Term\n\nNon-Relevant Terms for Sound & Gravity Waves (See KW78 2.7b)\n\nDerived using Compressible Continuity & Thermodynamic Equations; Tensor Notation Used for Simplicity\n\n","type":"content","url":"/notebooks/intro/crash-course#prognostics","position":17},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Assumptions and Simplification","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#assumptions-and-simplification","position":18},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Assumptions and Simplification","lvl2":"Basic Equations"},"content":"In this notebook we construct a two-dimensional, dry, and compressible atmospheric model that is broadly in line with KW78, though several assumptions and choice configurations were made to simplify the current model for computational and educational efficiency.\n\n\nWe will only consider the zonal (x) and vertical (z) components.\n\nBase-state variables are a function of z only, denoted by \\overline{\\phi}.\n\nWater-vapor is neglected (i.e, q_{v}, q_{r}, q_{c} = 0), so  T_{v} = T and/or \\theta_{v} = \\theta.\n\nCoriolis force, microphysics, and Turbulence are also neglected(i.e., f, M_{\\theta}, D_{\\theta} = 0).\n\nAs in KW78, the f_{\\pi} term in Pressure Equation (PEQ4-3) is neglected due to its negligible influences on convective-scale processes along with sound and gravity waves.\n\nSub-Grid Processes require parameterizations in order to achieve model closure. For example, sub-grid turbulence is first obtained using Reynolds Averaged prognostic variables (i.e., breaking up variables into mean and turbulence components), and then must be parameterized using additional assumptions (such as the flux-gradient approach).\n\nThe current test case is designed to have a calm and isentropic base-state (i.e., \\frac{\\partial \\overline\\theta}{\\partial t} and  \\overline{U} = 0)\n\n","type":"content","url":"/notebooks/intro/crash-course#assumptions-and-simplification","position":19},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Final Prognostic Equations","lvl2":"Basic Equations"},"type":"lvl3","url":"/notebooks/intro/crash-course#final-prognostic-equations","position":20},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Final Prognostic Equations","lvl2":"Basic Equations"},"content":"The aforementioned assumptions allowed for the derivation of the following simplified equations that serve as the foundation for the numerical model.\n\n\nEQ1. Zonal Momentum Equation\\underset{1}{\\frac{du}{dt}}+\n\\underset{2}{c_{p} \\bar{\\theta} \\frac{\\partial \\pi}{\\partial x}}\n=0\n\nLagrangian Derivative of Zonal Wind\n\nPGF Term\n\n\nEQ2. Vertical Momentum Equation\\underset{1}{\\frac{dw}{dt}}+\n\\underset{2}{c_{p} \\bar{\\theta} \\frac{\\partial \\pi}{\\partial z}}= \n\\underset{3}{g\\left[\\frac{\\theta}{\\bar{\\theta}} - 1\\right]}\n\nLagrangian Derivative of Vertical Wind\n\nPGF Term\n\nDry Buoyancy Contribution\n\n\nEQ3. Prognostic Equations\\underset{1}{\\frac{d\\theta}{dt}}\n=0\n\nLagrangian Derivative of Potential Temperature\n\n\nEQ4. Pressure Equation\\underset{1}{\\frac{\\partial\\pi}{\\partial t}}+ \n\\underset{2}{\\frac{\\overline{c}^2}{c_{p}\\overline{\\rho}\\overline{\\theta}^2}[\n\\frac{\\partial}{\\partial x}(\\overline{\\rho}\\overline{\\theta}u) +\n\\frac{\\partial}{\\partial z}(\\overline{\\rho}\\overline{\\theta}w)]} \n=0\n\nEulerian Derivative of Pressure\n\nPressure Adjustment Terms\n\n","type":"content","url":"/notebooks/intro/crash-course#final-prognostic-equations","position":21},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Model Configuration"},"type":"lvl2","url":"/notebooks/intro/crash-course#model-configuration","position":22},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Model Configuration"},"content":"Summary:\n\nThe current test case was configured using a 32 x 20 km^2 grid, including by 160 zonal grid points (nx) and 100 vertical grid points (nz), with both the horizontal and vertical grid-spacing (\\Delta x, \\Delta z) set to 200 m. Equations are integrated using a 0.1 s time-step (\\Delta t).\n\nDomain (32 km x 20 km):\n\nnx = 160\n\nnz = 100\n\ndx, dz = 200 m\n\n\nGrid Type (Staggered Grid: C) (In/Around Box-Good for Advection)\n\nMass: Centered (i,k)\n\nVelocity: Edges\n\nu (i +/- 1/2, k)\n\nw (i, k +/- 1/2)\n\n\n\n\nBoundary Conditions\n\nFree-Slip Lower\n\nRigid Top\n\nPeriodic Lateral\n\n\nInitial Conditions\n\nP_surf = 950 hPa, with remainder of atmosphere determined via hydrostatic-balance\n\nTheta = 300 K (isentropic)\n\nCalm (u, w) = 0\n\nCI: +3 K Warm Bubble \\theta^{\\prime}, with radius of 4 km centered at z = 2 km. p^{\\prime} (and thus \\pi) is adjusted accordingly.\n\n\n","type":"content","url":"/notebooks/intro/crash-course#model-configuration","position":23},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Discretization"},"type":"lvl2","url":"/notebooks/intro/crash-course#discretization","position":24},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Discretization"},"content":"","type":"content","url":"/notebooks/intro/crash-course#discretization","position":25},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"General Approach","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/crash-course#general-approach","position":26},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"General Approach","lvl2":"Discretization"},"content":"The following space/time discritezation methods were used to convert the model equations into a code-ready format.\n\nCentered Spatial Differencing, on a C-grid:\\frac{\\partial \\phi}{\\partial x_i} \\approx \\frac{\\phi_{i+\\frac{1}{2}} - \\phi_{i-\\frac{1}{2}}}{\\Delta x_i}\n\nHowever, due to averaging, many of the formulations became equivalent to centered differencing on a non-staggered grid:\\frac{\\partial \\phi}{\\partial x_i} \\approx \\frac{\\phi_{i+1} - \\phi_{i-1}}{2 \\Delta x_i}\n\nLeap-Frog Time Differencing:\\frac{\\partial \\phi}{\\partial t} \\approx \\frac{\\phi^{\\tau+1} - \\phi^{\\tau-1}}{2 \\Delta t}","type":"content","url":"/notebooks/intro/crash-course#general-approach","position":27},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/crash-course#equation-by-equation","position":28},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"","type":"content","url":"/notebooks/intro/crash-course#equation-by-equation","position":29},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"u-momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#u-momentum","position":30},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"u-momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Given our indexing notation, this equation is centered on the (i + \\frac{1}{2}, k) point.\n\nu advection Term:u\\frac{\\partial u}{\\partial x} \\cong\n\\frac{1}{2\\Delta x}u_{i + \\frac{1}{2}, k}(u_{i + \\frac{3}{2}, k}-\nu_{i - \\frac{1}{2}, k})\n\nTODO: show full derivation, not just final equation\n\nTo implement this in code, we must consider that the array indexes are whole numbers, and relative to the particular array. When we loop over the two spatial dimensions for u, this becomes:\n\n@numba.njit()\ndef u_tendency_u_advection_term(u, dx):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = u[k, i] * (u[k, i + 1] - u[k, i - 1]) / (2 * dx)\n    return term\n\nw advection term:w\\frac{\\partial u}{\\partial z} \\cong\n\\frac{1}{4}( w_{i + 1, k + \\frac{1}{2}} + w_{i + 1, k - \\frac{1}{2}} +\nw_{i, k + \\frac{1}{2}} + w_{i, k - \\frac{1}{2}})\n\\frac{1}{2\\Delta z}(u_{i + \\frac{1}{2}, k + 1} - u_{i + \\frac{1}{2}, k - 1} )\n\nTODO: show full derivation, not just final equation\n\n@numba.njit()\ndef u_tendency_w_advection_term(u, w, dz):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = 0.25 * (\n                w[k + 1, i] + w[k + 1, i - 1] + w[k, i] + w[k, i - 1] \n            ) * (u[k + 1, i] - u[k - 1, i]) / (2 * dz)\n    return term\n\nPGF Term:c_{p}\\bar{\\theta} \\frac{\\partial \\pi}{\\partial x} \\cong \nc_{p}\\bar{\\theta_{k}}\\frac{1}{\\Delta x}(\\pi_{i+1,k}-\\pi_{i,k} )\n\n@numba.njit()\ndef u_tendency_pgf_term(u, pi, theta_base, dx):\n    term = np.zeros_like(u)\n    for k in range(1, u.shape[0] - 1):\n        for i in range(1, u.shape[1] - 1):\n            term[k, i] = c_p * theta_base[k] * (pi[k, i] - pi[k, i - 1]) / dx\n    return term\n\nNow, we can combine all these RHS terms, accounting for the negation/subtraction present in the full equation\n\n@numba.njit()\ndef u_tendency(u, w, pi, theta_base, dx, dz):\n    return (\n        u_tendency_u_advection_term(u, dx)\n        + u_tendency_w_advection_term(u, w, dz)\n        + u_tendency_pgf_term(u, pi, theta_base, dx)\n    ) * -1\n\n","type":"content","url":"/notebooks/intro/crash-course#u-momentum","position":31},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"w momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#w-momentum","position":32},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"w momentum","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Here, we proceed similarly\n\nu advection term:u\\frac{\\partial w}{\\partial x} = \n\\frac{1}{4}(u_{i + \\frac{1}{2}, k + 1} +\nu_{i + \\frac{1}{2}, k} + \nu_{i - \\frac{1}{2}, k +1} +\nu_{i - \\frac{1}{2}, k})\n\\frac{1}{2\\Delta x}(w_{i + 1, k + \\frac{1}{2}} - \nw_{i - 1, k + \\frac{1}{2}})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_u_advection_term(u, w, dx):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = 0.25 * (\n                u[k, i] + u[k, i + 1] + u[k - 1, i] + u[k - 1, i + 1]  \n            ) * (w[k, i + 1] - w[k, i - 1]) / (2 * dx)\n    return term\n\nw advection term:w\\frac{\\partial w}{\\partial z}=\nw_{i, k + \\frac{1}{2}}\n\\frac{1}{2\\Delta z} (w_{i, k + \\frac{3}{2}} - w_{i-1, \\frac{1}{2}})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_w_advection_term(w, dz):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = w[k, i] * (w[k + 1, i] - w[k - 1, i]) / (2 * dz)\n    return term\n\nPGF term:c_{p}\\overline{\\theta}\\frac{\\partial \\pi}{\\partial z} =\nc_{p} \\frac{1}{2}( \\overline{\\theta}_{k+1} + \\overline{\\theta}_{k})\n\\frac{1}{\\Delta z}(\\pi_{i, k+1} - \\pi_{i,k})\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_pgf_term(w, pi, theta_base, dz):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = c_p * 0.5 * (theta_base[k] + theta_base[k - 1]) * (pi[k - 1, i] - pi[k, i]) / dz\n    return term\n\nBuoyancy Term:g\\left[\\frac{\\theta^{\\prime}}{\\overline{\\theta}}\\right] =\n  g\\left[\\frac{\\theta_{i, k+1}^{\\prime} + \\theta_{i, k}^{\\prime}}{\\overline{\\theta}_{k+1}, \\overline{\\theta}_{k}}\\right]\n\nTODO: full derivation\n\n@numba.njit()\ndef w_tendency_buoyancy_term(w, theta_p, theta_base):\n    term = np.zeros_like(w)\n    for k in range(2, term.shape[0] - 2):\n        for i in range(1, term.shape[1] - 1):\n            term[k, i] = gravity * (theta_p[k, i] + theta_p[k - 1, i]) / (theta_base[k] + theta_base[k - 1]) \n    return term\n\nWhich, in combination, becomes:\n\n@numba.njit()\ndef w_tendency(u, w, pi, theta_p, theta_base, dx, dz):\n    return (\n        w_tendency_u_advection_term(u, w, dx) * -1.0\n        - w_tendency_w_advection_term(w, dz)\n        - w_tendency_pgf_term(w, pi, theta_base, dz)\n        + w_tendency_buoyancy_term(w, theta_p, theta_base)\n    )\n\n","type":"content","url":"/notebooks/intro/crash-course#w-momentum","position":33},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Theta tendency equation","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#theta-tendency-equation","position":34},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Theta tendency equation","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"u advection term:u\\frac{\\partial \\theta^{\\prime}}{\\partial x} = \n       \\frac{1}{2}(u_{i+\\frac{1}{2}, k} + u_{i-\\frac{1}{2}})\n       \\frac{1}{2\\Delta x}(\\theta_{i+1,k}^{\\prime}-\\theta_{i-1,k}^{\\prime})\n\n@numba.njit()\ndef theta_p_tendency_u_advection_term(u, theta_p, dx):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (u[k, i + 1] + u[k, i]) / 2\n                * (theta_p[k, i + 1] - theta_p[k, i - 1]) / (2 * dx)\n            )\n    return term\n\nw advection of theta perturbation:w\\frac{\\partial \\theta^{\\prime}}{\\partial z} = \n       \\frac{1}{2}(w_{i+\\frac{1}{2}, k} + w_{i-\\frac{1}{2}})\n       \\frac{1}{2\\Delta z}(\\theta_{i,k+1}^{\\prime}-\\theta_{i,k-1}^{\\prime})\n\n@numba.njit()\ndef theta_p_tendency_w_advection_of_perturbation_term(w, theta_p, dz):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (w[k + 1, i] + w[k, i]) / 2\n                * (theta_p[k + 1, i] - theta_p[k - 1, i]) / (2 * dz)\n            )\n    return term\n\nw advection of theta base state:w\\frac{\\partial \\overline{\\theta}}{\\partial z} = \n   \\frac{1}{2}(w_{i, k+\\frac{1}{2}} + w_{i,k\\frac{1}{2}})\n   \\frac{1}{2\\Delta z}(\\overline{\\theta}_{k+1}-\\overline\\theta_{k-1})\n\n@numba.njit()\ndef theta_p_tendency_w_advection_of_base_term(w, theta_p, theta_base, dz):\n    term = np.zeros_like(theta_p)\n    for k in range(1, theta_p.shape[0] - 1):\n        for i in range(1, theta_p.shape[1] - 1):\n            term[k, i] = (\n                (w[k + 1, i] + w[k, i]) / 2\n                * (theta_base[k + 1] - theta_base[k - 1]) / (2 * dz)\n            )\n    return term\n\nCombining, becomes:\n\n@numba.njit()\ndef theta_p_tendency(u, w, theta_p, theta_base, dx, dz):\n    return (\n        theta_p_tendency_u_advection_term(u, theta_p, dx)\n        + theta_p_tendency_w_advection_of_perturbation_term(w, theta_p, dz)\n        + theta_p_tendency_w_advection_of_base_term(w, theta_p, theta_base, dz)\n    ) * -1\n\n","type":"content","url":"/notebooks/intro/crash-course#theta-tendency-equation","position":35},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Non-dimensional Pressure Tendency","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"type":"lvl4","url":"/notebooks/intro/crash-course#non-dimensional-pressure-tendency","position":36},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Non-dimensional Pressure Tendency","lvl3":"Equation-by-Equation","lvl2":"Discretization"},"content":"Based on the treatment by KW78, this equation expressed with a leading factor (which has k-index dependence) and two interior terms (which have finite differences). We express these together as:\\begin{align*}\n-\\frac{\\bar{c}^2}{c_p \\bar{\\rho}_k \\bar{\\theta}_k^2}\\bigg[ &\\bar{\\rho}_k \\bar{\\theta}_k \\frac{1}{\\Delta x} \\left(u_{i + \\frac{1}{2}, k} - u_{i - \\frac{1}{2}, k}\\right) \\\\\n\\quad\\quad &+ \\frac{1}{2}\\left(w_{i, k+\\frac{1}{2}} + w_{i, k-\\frac{1}{2}}\\right) \\frac{1}{2\\Delta z} \\left(\\bar{\\rho}_{k+1} \\bar{\\theta}_{k+1} - \\bar{\\rho}_{k-1} \\bar{\\theta}_{k-1}\\right) \\\\\n\\quad\\quad &+ \\bar{\\rho}_k \\bar{\\theta}_k \\frac{1}{\\Delta z} \\left(w_{i , k+ \\frac{1}{2}} - w_{i, k - \\frac{1}{2}}\\right)\\bigg]\n\\end{align*}\n\n@numba.njit()\ndef pi_tendency(u, w, pi, theta_base, rho_base, c_s_sqr, dx, dz):\n    term = np.zeros_like(pi)\n    for k in range(1, pi.shape[0] - 1):\n        for i in range(1, pi.shape[1] - 1):\n            term[k, i] = (\n                -1 * (c_s_sqr / (c_p * rho_base[k] * theta_base[k]**2))\n                * (\n                    (rho_base[k] * theta_base[k] * (u[k, i + 1] - u[k, i]) / dx)\n                    + (\n                        (w[k + 1, i] + w[k, i]) / 2\n                        * (rho_base[k + 1] * theta_base[k + 1] - rho_base[k - 1] * theta_base[k - 1]) / (2 * dz)\n                    )\n                    + (rho_base[k] * theta_base[k] * (w[k + 1, i] - w[k, i]) / dz)\n                )\n            )\n    return term\n\n","type":"content","url":"/notebooks/intro/crash-course#non-dimensional-pressure-tendency","position":37},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Running the Model"},"type":"lvl2","url":"/notebooks/intro/crash-course#running-the-model","position":38},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Running the Model"},"content":"We are now ready to set up and run the model!","type":"content","url":"/notebooks/intro/crash-course#running-the-model","position":39},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Setup","lvl2":"Running the Model"},"type":"lvl3","url":"/notebooks/intro/crash-course#setup","position":40},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Setup","lvl2":"Running the Model"},"content":"To start, we initialize the model driver class (see the \n\ndriver.py if interested in the details) using our aforementioned model options, and plugging in our tendency equations written above. We then add in the initial base state and perturbations, so that the model has something to simulate. Finally, we export the initial state to inspect later:\n\n# Set up model\n# model = ModelDriver(\n#     nx=160, nz=100, dx=200., dz=200., dt=0.01, c_s_sqr=50.0**2,\n#     u_tendency=u_tendency, w_tendency=w_tendency, theta_p_tendency=theta_p_tendency, pi_tendency=pi_tendency\n# )\nmodel = ModelDriver(\n    nx=160, nz=100, dx=200., dz=200., dt=0.1, c_s_sqr=50.0**2,\n    u_tendency=u_tendency, w_tendency=w_tendency, theta_p_tendency=theta_p_tendency, pi_tendency=pi_tendency\n)\nmodel.initialize_isentropic_base_state(300., 9.5e4)\n#model.initialize_warm_bubble(3.0, 4.0e3, 4.0e3, 0.0e3, 2.0e3)\nmodel.initialize_warm_bubble(3.0, 4.0e3, 4.0e3, 0.0e3, 2.0e3)\n# Start saving results\nresults = []\nresults.append(model.current_state())\n\nWe can quickly preview what this initial warm bubble looks like using xarray:\n\nax = results[0]['theta_p'][0].plot.imshow(\n    vmin=-3, vmax=3, cmap='RdBu_r'\n)\n# fig = ax.get_figure()\n# fig.savefig('theta_p_left.png', dpi=300, bbox_inches='tight')\n\n","type":"content","url":"/notebooks/intro/crash-course#setup","position":41},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Running the model forward in time","lvl3":"Setup","lvl2":"Running the Model"},"type":"lvl4","url":"/notebooks/intro/crash-course#running-the-model-forward-in-time","position":42},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl4":"Running the model forward in time","lvl3":"Setup","lvl2":"Running the Model"},"content":"Now, we can actually start integrating in time. At the first timestep, we don’t have the data to use leapfrog integration, so we need a special first timestep that does a forward-in-time approach (also known as Euler forward differencing):\n\n# Integrate the model, saving after desired timestep counts\nmodel.take_first_timestep()\nresults.append(model.current_state())\n\nTODO: fix/adjust approach later\n\nNow, the model (as written above) has been found to have a numerical instability that causes the model to “explode” within 30 seconds of simulated time. To showcase how such a model can go wrong, we save results every timestep, as follows:\n\nfor _ in range(3000):\n    model.integrate(1)\n    results.append(model.current_state())\n\n# Merge results\nds = xr.concat(results, 't')\n\nax = results[0]['pi'][0].plot.imshow( cmap='RdBu_r')\n# fig = ax.get_figure()\n# fig.savefig('crash_left.png', dpi=300, bbox_inches='tight')\n\nmv = ModelVis(ds)\nmv.panes\n\npanel_view = cfl_quiver_row(ds, stride=8, cmap='bwr')  # or 'jet' if you prefer\npanel_view   # display in notebook; or panel_view.show(); or panel_vi\n\n\n","type":"content","url":"/notebooks/intro/crash-course#running-the-model-forward-in-time","position":43},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Troubleshooting Model Instability"},"type":"lvl2","url":"/notebooks/intro/crash-course#troubleshooting-model-instability","position":44},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Troubleshooting Model Instability"},"content":"\n\nFor numerical instability issues (when the model “explodes”), sensitivity testing is a key diagnostic approach. The idea is to identify the variables that may influence stability and then vary them one at a time while keeping all other factors constant. In this case, we present three example tests below:\n\n","type":"content","url":"/notebooks/intro/crash-course#troubleshooting-model-instability","position":45},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Initial Bubble Position","lvl2":"Troubleshooting Model Instability"},"type":"lvl3","url":"/notebooks/intro/crash-course#change-initial-bubble-position","position":46},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Initial Bubble Position","lvl2":"Troubleshooting Model Instability"},"content":"Purpose: Determine whether instability is caused by inappropriate boundary condition.\nProcedure:\n\nPlace the initial thermal bubble in different positions (center, near top, near bottom, near lateral edges).\n\nKeep all other model parameters fixed.\nDiagnosis Logic:\n\nIf instability occurs only when the bubble is near a specific boundary (e.g., bottom), this points to boundary condition problems such as spurious reflections or incorrect implementation.\n\nmodel = ModelDriver(\n    nx=160, nz=100, dx=200., dz=200., dt=2, c_s_sqr=50.0**2,\n    u_tendency=u_tendency, w_tendency=w_tendency, theta_p_tendency=theta_p_tendency, pi_tendency=pi_tendency\n)\nmodel.initialize_isentropic_base_state(300., 9.5e4)\n#model.initialize_warm_bubble(3.0, 4.0e3, 4.0e3, 0.0e3, 2.0e3)\nmodel.initialize_warm_bubble(3.0, 4.0e3, 4.0e3, 0.0e3, 2.0e3)\n# Start saving results\nresults = []\nresults.append(model.current_state())\n\n","type":"content","url":"/notebooks/intro/crash-course#change-initial-bubble-position","position":47},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Time Step (\\Delta t)","lvl2":"Troubleshooting Model Instability"},"type":"lvl3","url":"/notebooks/intro/crash-course#change-time-step-delta-t","position":48},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Time Step (\\Delta t)","lvl2":"Troubleshooting Model Instability"},"content":"Purpose: Test the temporal stability of the time integration scheme and check CFL compliance.\nProcedure:\n\nReduce (\\Delta t) incrementally (e.g., 0.01 → 0.005 → 0.001 s).\n\nRun simulations for each Δt without changing spatial resolution or physical parameters.\n\nIf instability disappears or is delayed when Δt is reduced, the issue may be CFL condition violation or insufficient temporal resolution for fast modes (acoustic or gravity waves).\n\nIf there is no change, instability may not be driven by time step size.\n\n","type":"content","url":"/notebooks/intro/crash-course#change-time-step-delta-t","position":49},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Speed of Sound (cs)","lvl2":"Troubleshooting Model Instability"},"type":"lvl3","url":"/notebooks/intro/crash-course#change-speed-of-sound-cs","position":50},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"Change Speed of Sound (cs)","lvl2":"Troubleshooting Model Instability"},"content":"Purpose: Isolate the role of acoustic modes in driving instability.\nProcedure:\n\nModify Cs in the model physics.\n\nLower values slow acoustic waves; higher values speed them up.\n\nIf stability changes when csc_scs​ changes, acoustic wave behavior and their interactions with boundaries are important.\n\nThis also indirectly modifies the acoustic CFL condition, so link findings back to Test 2 results.\n\n\n\n","type":"content","url":"/notebooks/intro/crash-course#change-speed-of-sound-cs","position":51},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/intro/crash-course#summary","position":52},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Summary"},"content":"The preceding cookbook provided a crash-course on the development of a 2-D Mesoscale Numerical Model, starting with the basic dynamical equations through the conversion to computer code and ultimately model integration. This pre-configured “test-case” is intended to be used for educational purposes only. Note that all the assumptions/configurations used herein may not be applicable for other situations. Future notebooks are to be included, demonstrating how various configurations (i.e., equation simplifications, discretization schemes, boundary conditions, grid styles, and spatiotemporal resolutions) all influences the performance and accuracy of the resultant output. Additionally, we plan to include explicit walk-throughs regarding stability analyses, corrections, and filtering techniques. Check-in regularly for updates to this Cookbook.","type":"content","url":"/notebooks/intro/crash-course#summary","position":53},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/notebooks/intro/crash-course#whats-next","position":54},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl3":"What’s next?","lvl2":"Summary"},"content":"TODO: reference later portionsLet Jupyter book tie this to the next (sequential) piece of content that people could move on to down below and in the sidebar. However, if this page uniquely enables your reader to tackle other nonsequential concepts throughout this book, or even external content, link to it here!\n\n","type":"content","url":"/notebooks/intro/crash-course#whats-next","position":55},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Resources"},"type":"lvl2","url":"/notebooks/intro/crash-course#resources","position":56},{"hierarchy":{"lvl1":"Crash Course Towards Your First Model","lvl2":"Resources"},"content":"TODO: add these\nFinally, be rigorous in your citations and references as necessary. Give credit where credit is due. Also, feel free to link to relevant external material, further reading, documentation, etc. Then you're done! Give yourself a quick review, a high five, and send us a pull request. A few final notes:\n - `Kernel > Restart Kernel and Run All Cells...` to confirm that your notebook will cleanly run from start to finish\n - `Kernel > Restart Kernel and Clear All Outputs...` before committing your notebook, our machines will do the heavy lifting\n - Take credit! Provide author contact information if you'd like; if so, consider adding information here at the bottom of your notebook\n - Give credit! Attribute appropriate authorship for referenced code, information, images, etc.\n - Only include what you're legally allowed: **no copyright infringement or plagiarism**\n \nThank you for your contribution!\n","type":"content","url":"/notebooks/intro/crash-course#resources","position":57},{"hierarchy":{"lvl1":"Improving 2D Model"},"type":"lvl1","url":"/notebooks/intro/improving-model","position":0},{"hierarchy":{"lvl1":"Improving 2D Model"},"content":"","type":"content","url":"/notebooks/intro/improving-model","position":1},{"hierarchy":{"lvl1":"Initial Concepts"},"type":"lvl1","url":"/notebooks/intro/initial-concepts","position":0},{"hierarchy":{"lvl1":"Initial Concepts"},"content":"...","type":"content","url":"/notebooks/intro/initial-concepts","position":1},{"hierarchy":{"lvl1":"Gill-Matsuno model"},"type":"lvl1","url":"/notebooks/intro/matsuno-gill","position":0},{"hierarchy":{"lvl1":"Gill-Matsuno model"},"content":"The Gill-Matsuno model is a classical atmospheric model that describes the tropical atmospheric response to a prescribed heating. It consists of 3 prognostic variables u, v, and p in an equatorial beta-plane approximation. The non-dimensional form of the equations is given by:\\frac{\\partial u}{\\partial t} + \\epsilon u - \\frac{1}{2} yv = -\\frac{\\partial p}{\\partial x}\n\\\\\n\\frac{\\partial v}{\\partial t} + \\epsilon v + \\frac{1}{2} yu = -\\frac{\\partial p}{\\partial y}\n\\\\\n\\frac{\\partial p}{\\partial t} + \\epsilon p + \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} = -Q\n\nThis cookbook aims to reproduce the results of the classical Gill-Matsuno model experiment in different forcing scenarios. The model is set up on a grid with prescribed parameters, and the forcing function Q is defined to represent the heating in the atmosphere. Here we will explore the steady-state solution of the set of equations outline above, which is often used to analyze the tropical atmospheric dynamics in a simplified manner.","type":"content","url":"/notebooks/intro/matsuno-gill","position":1},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/intro/matsuno-gill#imports","position":2},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Imports"},"content":"\n\nimport time\n\nimport hvplot.xarray\nimport matplotlib.pyplot as plt\nimport numba\nimport numpy as np\nimport xarray as xr\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#imports","position":3},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Discretization"},"type":"lvl2","url":"/notebooks/intro/matsuno-gill#discretization","position":4},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Discretization"},"content":"The numerical scheme used to solve the equations is a forward-in-time, centered-in-space finite difference method. The steady-state solution of the system will be reached by model convergence after a sufficient number of time steps. Solving for \\partial / \\partial t, equation \n\n(1) becomes:\\frac{\\partial u}{\\partial t} = -\\frac{\\partial p}{\\partial x} - \\epsilon u + \\frac{1}{2} yv\\frac{\\partial v}{\\partial t} = -\\frac{\\partial p}{\\partial y} - \\epsilon v - \\frac{1}{2} yu\\frac{\\partial p}{\\partial t} = -Q - \\epsilon p - ( \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} )\n\nWe will shift our focus to the terms that need discretization first","type":"content","url":"/notebooks/intro/matsuno-gill#discretization","position":5},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Pressure Gradient Force (PGF)","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#pressure-gradient-force-pgf","position":6},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Pressure Gradient Force (PGF)","lvl2":"Discretization"},"content":"The first term on the RHS of \n\n(2) and \n\n(3) represents the pressure gradient force. The discretization of this term looks as follow:-\\frac{\\partial p}{\\partial x} \\approx -\\frac{p^{\\tau}_{i+1,j} - p^{\\tau}_{i-1,j}}{2\\Delta x}-\\frac{\\partial p}{\\partial y} \\approx -\\frac{p^{\\tau}_{i,j+1} - p^{\\tau}_{i,j-1}}{2\\Delta y}\n\n@numba.njit\ndef pressure_gradient_x(p, dx):\n    \"\"\"Calculates the pressure gradient in the x-direction.\"\"\"\n    term = np.zeros_like(p)\n    for i in range(1, p.shape[0] - 1):\n        for j in range(1, p.shape[1] - 1):\n            term[i, j] = -(p[i + 1, j] - p[i - 1, j]) / (2 * dx)\n    return term\n\n\n@numba.njit\ndef pressure_gradient_y(p, dy):\n    \"\"\"Calculates the pressure gradient in the y-direction.\"\"\"\n    term = np.zeros_like(p)\n    for i in range(1, p.shape[0] - 1):\n        for j in range(1, p.shape[1] - 1):\n            term[i, j] = -(p[i, j + 1] - p[i, j - 1]) / (2 * dy)\n    return term\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#pressure-gradient-force-pgf","position":7},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Divergence","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#divergence","position":8},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Divergence","lvl2":"Discretization"},"content":"The third term on the RHS of \n\n(4) represents the divergence of the velocity field. The discretization of this term looks as follow:-( \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} ) \\approx -\\frac{u^{\\tau}_{i+1,j} - u^{\\tau}_{i-1,j}}{2\\Delta x} - \\frac{v^{\\tau}_{i,j+1} - v^{\\tau}_{i,j-1}}{2\\Delta y}\n\n@numba.njit\ndef divergence(u, v, dx, dy):\n    \"\"\"Calculates the divergence for the pressure equation.\"\"\"\n    term = np.zeros_like(u)\n    for i in range(1, u.shape[0] - 1):\n        for j in range(1, u.shape[1] - 1):\n            du_dx = (u[i + 1, j] - u[i - 1, j]) / (2 * dx)\n            dv_dy = (v[i, j + 1] - v[i, j - 1]) / (2 * dy)\n            term[i, j] = -(du_dx + dv_dy)\n    return term\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#divergence","position":9},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Damping","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#damping","position":10},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Damping","lvl2":"Discretization"},"content":"The Gill-Matsuno model includes a damping term to account for dissipative processes in the atmosphere. This is given by the \\epsilon parameter found as the second term of the RHS of \n\n(2), \n\n(3), and \n\n(4) that does not involve any derivatives.-\\epsilon u \\approx -\\epsilon u^{\\tau}_{i,j}\n\\\\\n-\\epsilon v \\approx -\\epsilon v^{\\tau}_{i,j}\n\\\\\n-\\epsilon p \\approx -\\epsilon p^{\\tau}_{i,j}\n\n@numba.njit\ndef damping(field, epsilon):\n    \"\"\"Calculates the damping for a given field.\"\"\"\n    return -epsilon * field\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#damping","position":11},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Coriolis","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#coriolis","position":12},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Coriolis","lvl2":"Discretization"},"content":"In the equatorial beta-plane approximation, the non-dimensional form of the Coriolis term is given by the last term on the RHS of equations \n\n(2) and \n\n(3). It is represented as follows:\\frac{1}{2} yv = \\frac{1}{2} y v^{\\tau}_{i,j}\n\nThe expression for \n\n(3) is equivalent but with u instead of v and of negative sign.\n\n@numba.njit\ndef coriolis_term(field, yy, sign=1):\n    \"\"\"Calculates the Coriolis term\"\"\"\n    return 0.5 * yy * field * sign\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#coriolis","position":13},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Heating","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#heating","position":14},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Heating","lvl2":"Discretization"},"content":"The heating rate Q on equation \n\n(4) is used to study the heat-induced tropical circulation response on a resting atmosphere. The function create_heating generates a 2D heating field that can be used in the model.\n\ndef create_heating(xx, yy):\n    \"\"\"\n    Creates a 2D localized, symmetric heating function (Q).\n    \"\"\"\n    Q = np.zeros_like(xx)\n    L_forcing = 2.0\n\n    # Define a mask for where the heating is active\n    heating_mask = (xx > 4 * L_forcing) & (xx < 6 * L_forcing)\n\n    # Calculate the heating within the masked region\n    Q[heating_mask] = -(\n        np.sin(np.pi / (2 * L_forcing) * xx[heating_mask])\n        * np.exp(-0.25 * yy[heating_mask] ** 2)\n    )\n    da = xr.DataArray(\n        Q, dims=(\"x\", \"y\"), coords={\"x\": xx[:, 0], \"y\": yy[0, :]}, name=\"Q\"\n    )\n    return da\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#heating","position":15},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Boundary Conditions","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#boundary-conditions","position":16},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Boundary Conditions","lvl2":"Discretization"},"content":"Before putting everything together, we need to define the boundary conditions for our system. These conditions will ensure that our model behaves correctly at the edges of the computational domain. Here we implement the periodic boundary conditions in the zonal direction with a zero-gradient meridional boundary condition.\n\n@numba.njit\ndef apply_boundary_conditions(u, v, p):\n    \"\"\"\n    Applies periodic zonal and zero-gradient meridional boundary conditions.\n    \"\"\"\n    # Periodic in x (zonal)\n    u[0, :], u[-1, :] = u[-2, :], u[1, :]\n    v[0, :], v[-1, :] = v[-2, :], v[1, :]\n    p[0, :], p[-1, :] = p[-2, :], p[1, :]\n\n    # Zero-gradient in y (meridional)\n    u[:, 0], u[:, -1] = u[:, 1], u[:, -2]\n    v[:, 0], v[:, -1] = v[:, 1], v[:, -2]\n    p[:, 0], p[:, -1] = p[:, 1], p[:, -2]\n\n    return u, v, p\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#boundary-conditions","position":17},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Tendency","lvl2":"Discretization"},"type":"lvl3","url":"/notebooks/intro/matsuno-gill#tendency","position":18},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl3":"Tendency","lvl2":"Discretization"},"content":"Now that we have defined all the RHS terms, we can express the time tendency terms for the set of equations \n\n(2), \n\n(3), and \n\n(4) in a forward scheme as follows:u^{\\tau+1} = u^\\tau + \\Delta t \\frac{\\partial u}{\\partial t}\n\\\\\nv^{\\tau+1} = v^\\tau + \\Delta t \\frac{\\partial v}{\\partial t}\n\\\\\np^{\\tau+1} = p^\\tau + \\Delta t \\frac{\\partial p}{\\partial t}\n\nWhich relates the next time step to the current state of the system. The time derivatives in this equation have already been discretized and can be expressed as follow\\frac{\\partial u}{\\partial t} = PGF + Damping + Coriolis\n\\\\\n\\frac{\\partial v}{\\partial t} = PGF + Damping + Coriolis\n\\\\\n\\frac{\\partial p}{\\partial t} = Heating + Damping + Divergence\n\nThe solver loop takes all of the above equations and iteratively updates the state of the system at each time step. This process continues until the desired simulation time is reached.\n\n@numba.njit\ndef numba_solver_loop(u, v, p, Q, yy, params_tuple):\n    \"\"\"\n    Performs the time-stepping\n    \"\"\"\n    # Unpack parameters\n    dt, dx, dy, eps_u, eps_v, eps_p, num_steps = params_tuple\n\n    # Time-stepping loop\n    for tau in range(num_steps - 1):\n        # Get the current state (a 2D slice)\n        u_tau, v_tau, p_tau = u[tau, :, :], v[tau, :, :], p[tau, :, :]\n\n        # Calculate full tendency fields using the current state\n        du_dt = (\n            damping(u_tau, eps_u)\n            + coriolis_term(v_tau, yy, 1)\n            + pressure_gradient_x(p_tau, dx)\n        )\n        dv_dt = (\n            damping(v_tau, eps_v)\n            + coriolis_term(u_tau, yy, -1)\n            + pressure_gradient_y(p_tau, dy)\n        )\n        dp_dt = damping(p_tau, eps_p) + divergence(u_tau, v_tau, dx, dy) + Q\n\n        # Update the NEXT time slice in the main arrays\n        u[tau + 1, :, :] = u_tau + du_dt * dt\n        v[tau + 1, :, :] = v_tau + dv_dt * dt\n        p[tau + 1, :, :] = p_tau + dp_dt * dt\n\n        # Apply Boundary Conditions\n        u[tau + 1, :, :], v[tau + 1, :, :], p[tau + 1, :, :] = (\n            apply_boundary_conditions(\n                u[tau + 1, :, :], v[tau + 1, :, :], p[tau + 1, :, :]\n            )\n        )\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#tendency","position":19},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Model Setup"},"type":"lvl2","url":"/notebooks/intro/matsuno-gill#model-setup","position":20},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Model Setup"},"content":"Now that we have taken care of the equations, all we have left is to set up the model by defining the grid, initial conditions, and parameters. This will provide the foundation for our numerical simulations. For this implementation, we have the following parameters\n\nL_x: Length of the domain in the x direction. 1 unit here translates to 10 degrees of latitude/longitude.\n\nL_y: Half-length of the domain in the y direction. A value of 5 corresponds to a domain from -5 to 5.\n\ndx: Grid spacing in the x direction.\n\ndy: Grid spacing in the y direction.\n\ndt: Time step size.\n\neps_u, eps_v, eps_p: Damping coefficients for the u, v, and p fields, respectively.\n\nnum_steps: Number of time steps to simulate.\n\nmodel_parameters = {\n    \"Lx\": 25.0,\n    \"Ly\": 5.0,\n    \"dx\": 0.5,\n    \"dy\": 0.5,\n    \"dt\": 0.01,\n    \"eps_u\": 0.1,\n    \"eps_v\": 0.1,\n    \"eps_p\": 0.1,\n    \"num_steps\": 3000,\n}\n\nUsing these parameters, we can create the grid and include that inside our model_parameters dictionary.\n\ndef create_grid(params):\n    \"\"\"Creates the computational grid based on the provided parameters.\"\"\"\n    Lx, Ly, dx, dy = params[\"Lx\"], params[\"Ly\"], params[\"dx\"], params[\"dy\"]\n    xs = np.arange(0, Lx + dx, dx)\n    ys = np.arange(-Ly, Ly + dy, dy)\n    xx, yy = np.meshgrid(xs, ys, indexing=\"ij\")\n    return {\"xs\": xs, \"ys\": ys, \"xx\": xx, \"yy\": yy}\n\nmodel_parameters[\"grid\"] = create_grid(model_parameters)\n\nThe heating can be created now that we have the grid information.\n\nmodel_parameters[\"Q\"] = create_heating(\n    model_parameters[\"grid\"][\"xx\"], model_parameters[\"grid\"][\"yy\"]\n)\nmodel_parameters[\"Q\"].plot(cmap=\"Reds_r\", x=\"x\", figsize=(12.5, 5), add_colorbar=False)\nplt.title(\"Heating $Q$\")\n\nIf you want to define your own model parameters, remember to call the functions like thismodel_parameters = {\n    'Lx': 25.0, 'Ly': 5.0,\n    'dx': 0.5, 'dy': 0.5,\n    'dt': 0.01,\n    'eps_u': 0.1, 'eps_v': 0.1, 'eps_p': 0.1,\n    'num_steps': 3000,\n}\nmodel_parameters[\"grid\"] = create_grid(model_parameters)\nmodel_parameters[\"Q\"] = create_heating(model_parameters[\"grid\"]['xx'], model_parameters[\"grid\"]['yy'])\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#model-setup","position":21},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Running the model"},"type":"lvl2","url":"/notebooks/intro/matsuno-gill#running-the-model","position":22},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Running the model"},"content":"\n\nNow we are ready to run the model. The next function will take care of building the grid, initializing the arrays and creating the heating that goes into the simulation.\n\ndef setup_and_run_model(params):\n    \"\"\"Sets up the grid and initial conditions, then runs the solver.\"\"\"\n    num_steps = params[\"num_steps\"]\n    grid = params[\"grid\"]\n\n    x_dim, y_dim = len(grid[\"xs\"]), len(grid[\"ys\"])\n\n    # Create 3D arrays with time as the first dimension\n    u = np.zeros((num_steps, x_dim, y_dim))\n    v = np.zeros_like(u)\n    p = np.zeros_like(u)\n\n    # Pack parameters for Numba\n    params_tuple = (\n        params[\"dt\"],\n        params[\"dx\"],\n        params[\"dy\"],\n        params[\"eps_u\"],\n        params[\"eps_v\"],\n        params[\"eps_p\"],\n        num_steps,\n    )\n\n    print(\"🚀 Starting simulation...\")\n    start_time = time.time()\n\n    # Run the solver (we extract data from Q to convert it from xarray -> numpy)\n    numba_solver_loop(u, v, p, params[\"Q\"].data, grid[\"yy\"], params_tuple)\n\n    end_time = time.time()\n    print(f\"✅ Simulation finished in {end_time - start_time:.2f} seconds.\")\n\n    ds = xr.Dataset(\n        {\n            \"u\": xr.DataArray(\n                u,\n                dims=(\"time\", \"x\", \"y\"),\n                coords={\n                    \"time\": np.arange(u.shape[0]),\n                    \"x\": grid[\"xs\"],\n                    \"y\": grid[\"ys\"],\n                },\n            ),\n            \"v\": xr.DataArray(\n                v,\n                dims=(\"time\", \"x\", \"y\"),\n                coords={\n                    \"time\": np.arange(v.shape[0]),\n                    \"x\": grid[\"xs\"],\n                    \"y\": grid[\"ys\"],\n                },\n            ),\n            \"p\": xr.DataArray(\n                p,\n                dims=(\"time\", \"x\", \"y\"),\n                coords={\n                    \"time\": np.arange(p.shape[0]),\n                    \"x\": grid[\"xs\"],\n                    \"y\": grid[\"ys\"],\n                },\n            ),\n        }\n    )\n\n    return ds\n\nThe first time we run the model it will take longer so numba will compile the functions. Subsequent calls will be faster.\n\nmodel_output = setup_and_run_model(model_parameters)\n\n","type":"content","url":"/notebooks/intro/matsuno-gill#running-the-model","position":23},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Visualize the results"},"type":"lvl2","url":"/notebooks/intro/matsuno-gill#visualize-the-results","position":24},{"hierarchy":{"lvl1":"Gill-Matsuno model","lvl2":"Visualize the results"},"content":"\n\nSince we are wrapping the results using xarray, we can take advantage of its powerful visualization capabilities.\n\nplot_kwargs = dict(x=\"x\", add_colorbar=False)\nfig, ax = plt.subplots(figsize=(12.5, 5))\nmodel_output[\"p\"].isel(time=-1).plot.contourf(ax=ax, cmap=\"Blues_r\", **plot_kwargs)\nmodel_output[\"p\"].isel(time=-1).plot.contour(\n    ax=ax, colors=\"k\", linewidths=0.5, **plot_kwargs\n)\nmodel_output.isel(time=-1).thin(x=3, y=2).plot.quiver(\n    ax=ax, x=\"x\", y=\"y\", u=\"u\", v=\"v\", scale=30, color=\"k\", width=0.003, add_guide=False\n)\nax.set_title(\"Gill-Matsuno output from symmetric forcing\")\nax.set_xlabel(\"Zonal Distance (x)\")\nax.set_ylabel(\"Meridional Distance (y)\")\n\nWe can visualize the individual time steps interactively by using hvplot.\n\nThe quiver plot is called vectorfield in hvplot and it requires magnitude and angle instead of u and v components.\n\nmag = np.sqrt(model_output.u**2 + model_output.v**2)\nangle = (np.pi / 2.0) - np.arctan2(model_output.u / mag, model_output.v / mag)\n\nds = xr.Dataset(\n    {\n        \"mag\": xr.DataArray(\n            mag,\n            dims=(\"time\", \"x\", \"y\"),\n            coords={\n                \"y\": model_parameters[\"grid\"][\"ys\"],\n                \"x\": model_parameters[\"grid\"][\"xs\"],\n                \"time\": np.arange(mag.shape[0]),\n            },\n        ),\n        \"angle\": xr.DataArray(\n            angle,\n            dims=(\"time\", \"x\", \"y\"),\n            coords={\n                \"y\": model_parameters[\"grid\"][\"ys\"],\n                \"x\": model_parameters[\"grid\"][\"xs\"],\n                \"time\": np.arange(angle.shape[0]),\n            },\n        ),\n    }\n)\n\nNow we can create the interactive plot\n\nlevels = np.arange(-2, 0.5, 0.2)\nplot_ops = dict(\n    groupby=\"time\",\n    x=\"x\",\n    y=\"y\",\n    hover=False,\n    colorbar=False,\n    legend=False,\n)\nover = (\n    model_output.p.hvplot.contourf(levels=levels, cmap=\"Blues_r\", **plot_ops)\n    * model_output.p.hvplot.contour(\n        levels=levels, cmap=[\"black\"] * len(levels), **plot_ops\n    )\n    * ds.hvplot.vectorfield(angle=\"angle\", mag=\"mag\", **plot_ops).opts(magnitude=\"mag\")\n)\nover","type":"content","url":"/notebooks/intro/matsuno-gill#visualize-the-results","position":25},{"hierarchy":{"lvl1":"Troubleshooting"},"type":"lvl1","url":"/notebooks/intro/troubleshooting","position":0},{"hierarchy":{"lvl1":"Troubleshooting"},"content":"","type":"content","url":"/notebooks/intro/troubleshooting","position":1},{"hierarchy":{"lvl1":"Methods of Solution"},"type":"lvl1","url":"/notebooks/numerics/finite-differencing","position":0},{"hierarchy":{"lvl1":"Methods of Solution"},"content":"Now that we have an understanding of the fundamental sets of differential equations that we will use (prognostic and diagnostic), we will focus on the methods used to solve them numerically. This is typically approached through the lens of discretization—turning the continuous equations into discrete forms. In space, we will be focusing on finite differences upon grids, though there will be brief discussions of other techniques such as spectral and finite element methods. Then, we will discuss time integration techniques, with a focus on the simplest forms such as Euler forward and Leapfrog in our full model, though more sophisticated forms of both explicit and implicit schemes will be discussed and demonstrated with simplified example problems. However, just because a discretized form can be written from a set of equations does not mean it will be well-behaved numerically. Hence, we will also go over approaches to the stability analysis of discrete equation sets as well as methods of numerical correction and filtering. While these sections of the cookbook are not yet available in its current version, we suggest exploring the following resources if you wish to learn more about these topics in the meantime:\n\nChapter 10 of \n\nPielke (2002)","type":"content","url":"/notebooks/numerics/finite-differencing","position":1},{"hierarchy":{"lvl1":"Summary"},"type":"lvl1","url":"/notebooks/summary/summary","position":0},{"hierarchy":{"lvl1":"Summary"},"content":"This cookbook is a work in progress, and while we hope that the introductory section and the referenced materials have been useful, there are several more aspects yet to come in the future! These include:\n\nInteractive and code-based examples in the prior sections\n\nAdditional graphics and figures\n\nAdditional applied examples in different types of simple atmospheric models (such as tropical waves, a tornado-like vortex, and more)\n\nApproaches for assessing and comparing model implementations and outputs\n\nRecommended resources to come soon!","type":"content","url":"/notebooks/summary/summary","position":1}]}